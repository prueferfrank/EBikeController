
NucleoF103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d70  08003d70  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d70  08003d70  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d70  08003d70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003de8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003de8  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008786  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014fe  00000000  00000000  0002881f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000888  00000000  00000000  00029d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f0  00000000  00000000  0002a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013d32  00000000  00000000  0002ad98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d61  00000000  00000000  0003eaca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ce08  00000000  00000000  0004582b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002780  00000000  00000000  000b26b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cd4 	.word	0x08003cd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003cd4 	.word	0x08003cd4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2f>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000900:	bf24      	itt	cs
 8000902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090a:	d90d      	bls.n	8000928 <__aeabi_d2f+0x30>
 800090c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800091c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000920:	bf08      	it	eq
 8000922:	f020 0001 	biceq.w	r0, r0, #1
 8000926:	4770      	bx	lr
 8000928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800092c:	d121      	bne.n	8000972 <__aeabi_d2f+0x7a>
 800092e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000932:	bfbc      	itt	lt
 8000934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000938:	4770      	bxlt	lr
 800093a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000942:	f1c2 0218 	rsb	r2, r2, #24
 8000946:	f1c2 0c20 	rsb	ip, r2, #32
 800094a:	fa10 f30c 	lsls.w	r3, r0, ip
 800094e:	fa20 f002 	lsr.w	r0, r0, r2
 8000952:	bf18      	it	ne
 8000954:	f040 0001 	orrne.w	r0, r0, #1
 8000958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000960:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000964:	ea40 000c 	orr.w	r0, r0, ip
 8000968:	fa23 f302 	lsr.w	r3, r3, r2
 800096c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000970:	e7cc      	b.n	800090c <__aeabi_d2f+0x14>
 8000972:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000976:	d107      	bne.n	8000988 <__aeabi_d2f+0x90>
 8000978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800097c:	bf1e      	ittt	ne
 800097e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000986:	4770      	bxne	lr
 8000988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800098c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_fmul>:
 8000998:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800099c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009a0:	bf1e      	ittt	ne
 80009a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009a6:	ea92 0f0c 	teqne	r2, ip
 80009aa:	ea93 0f0c 	teqne	r3, ip
 80009ae:	d06f      	beq.n	8000a90 <__aeabi_fmul+0xf8>
 80009b0:	441a      	add	r2, r3
 80009b2:	ea80 0c01 	eor.w	ip, r0, r1
 80009b6:	0240      	lsls	r0, r0, #9
 80009b8:	bf18      	it	ne
 80009ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009be:	d01e      	beq.n	80009fe <__aeabi_fmul+0x66>
 80009c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009cc:	fba0 3101 	umull	r3, r1, r0, r1
 80009d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009d8:	bf3e      	ittt	cc
 80009da:	0049      	lslcc	r1, r1, #1
 80009dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009e0:	005b      	lslcc	r3, r3, #1
 80009e2:	ea40 0001 	orr.w	r0, r0, r1
 80009e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009ea:	2afd      	cmp	r2, #253	; 0xfd
 80009ec:	d81d      	bhi.n	8000a2a <__aeabi_fmul+0x92>
 80009ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f6:	bf08      	it	eq
 80009f8:	f020 0001 	biceq.w	r0, r0, #1
 80009fc:	4770      	bx	lr
 80009fe:	f090 0f00 	teq	r0, #0
 8000a02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a06:	bf08      	it	eq
 8000a08:	0249      	lsleq	r1, r1, #9
 8000a0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a12:	3a7f      	subs	r2, #127	; 0x7f
 8000a14:	bfc2      	ittt	gt
 8000a16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a1e:	4770      	bxgt	lr
 8000a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	3a01      	subs	r2, #1
 8000a2a:	dc5d      	bgt.n	8000ae8 <__aeabi_fmul+0x150>
 8000a2c:	f112 0f19 	cmn.w	r2, #25
 8000a30:	bfdc      	itt	le
 8000a32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a36:	4770      	bxle	lr
 8000a38:	f1c2 0200 	rsb	r2, r2, #0
 8000a3c:	0041      	lsls	r1, r0, #1
 8000a3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a42:	f1c2 0220 	rsb	r2, r2, #32
 8000a46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a4e:	f140 0000 	adc.w	r0, r0, #0
 8000a52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a56:	bf08      	it	eq
 8000a58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a5c:	4770      	bx	lr
 8000a5e:	f092 0f00 	teq	r2, #0
 8000a62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a66:	bf02      	ittt	eq
 8000a68:	0040      	lsleq	r0, r0, #1
 8000a6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a6e:	3a01      	subeq	r2, #1
 8000a70:	d0f9      	beq.n	8000a66 <__aeabi_fmul+0xce>
 8000a72:	ea40 000c 	orr.w	r0, r0, ip
 8000a76:	f093 0f00 	teq	r3, #0
 8000a7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a7e:	bf02      	ittt	eq
 8000a80:	0049      	lsleq	r1, r1, #1
 8000a82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a86:	3b01      	subeq	r3, #1
 8000a88:	d0f9      	beq.n	8000a7e <__aeabi_fmul+0xe6>
 8000a8a:	ea41 010c 	orr.w	r1, r1, ip
 8000a8e:	e78f      	b.n	80009b0 <__aeabi_fmul+0x18>
 8000a90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a94:	ea92 0f0c 	teq	r2, ip
 8000a98:	bf18      	it	ne
 8000a9a:	ea93 0f0c 	teqne	r3, ip
 8000a9e:	d00a      	beq.n	8000ab6 <__aeabi_fmul+0x11e>
 8000aa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000aa4:	bf18      	it	ne
 8000aa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aaa:	d1d8      	bne.n	8000a5e <__aeabi_fmul+0xc6>
 8000aac:	ea80 0001 	eor.w	r0, r0, r1
 8000ab0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f090 0f00 	teq	r0, #0
 8000aba:	bf17      	itett	ne
 8000abc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	f091 0f00 	teqne	r1, #0
 8000ac6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aca:	d014      	beq.n	8000af6 <__aeabi_fmul+0x15e>
 8000acc:	ea92 0f0c 	teq	r2, ip
 8000ad0:	d101      	bne.n	8000ad6 <__aeabi_fmul+0x13e>
 8000ad2:	0242      	lsls	r2, r0, #9
 8000ad4:	d10f      	bne.n	8000af6 <__aeabi_fmul+0x15e>
 8000ad6:	ea93 0f0c 	teq	r3, ip
 8000ada:	d103      	bne.n	8000ae4 <__aeabi_fmul+0x14c>
 8000adc:	024b      	lsls	r3, r1, #9
 8000ade:	bf18      	it	ne
 8000ae0:	4608      	movne	r0, r1
 8000ae2:	d108      	bne.n	8000af6 <__aeabi_fmul+0x15e>
 8000ae4:	ea80 0001 	eor.w	r0, r0, r1
 8000ae8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af4:	4770      	bx	lr
 8000af6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000afa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_fdiv>:
 8000b00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b08:	bf1e      	ittt	ne
 8000b0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b0e:	ea92 0f0c 	teqne	r2, ip
 8000b12:	ea93 0f0c 	teqne	r3, ip
 8000b16:	d069      	beq.n	8000bec <__aeabi_fdiv+0xec>
 8000b18:	eba2 0203 	sub.w	r2, r2, r3
 8000b1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b20:	0249      	lsls	r1, r1, #9
 8000b22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b26:	d037      	beq.n	8000b98 <__aeabi_fdiv+0x98>
 8000b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	bf38      	it	cc
 8000b3c:	005b      	lslcc	r3, r3, #1
 8000b3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b46:	428b      	cmp	r3, r1
 8000b48:	bf24      	itt	cs
 8000b4a:	1a5b      	subcs	r3, r3, r1
 8000b4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b54:	bf24      	itt	cs
 8000b56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b62:	bf24      	itt	cs
 8000b64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b70:	bf24      	itt	cs
 8000b72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b7a:	011b      	lsls	r3, r3, #4
 8000b7c:	bf18      	it	ne
 8000b7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b82:	d1e0      	bne.n	8000b46 <__aeabi_fdiv+0x46>
 8000b84:	2afd      	cmp	r2, #253	; 0xfd
 8000b86:	f63f af50 	bhi.w	8000a2a <__aeabi_fmul+0x92>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ba0:	327f      	adds	r2, #127	; 0x7f
 8000ba2:	bfc2      	ittt	gt
 8000ba4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ba8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bac:	4770      	bxgt	lr
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	3a01      	subs	r2, #1
 8000bb8:	e737      	b.n	8000a2a <__aeabi_fmul+0x92>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bc2:	bf02      	ittt	eq
 8000bc4:	0040      	lsleq	r0, r0, #1
 8000bc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bca:	3a01      	subeq	r2, #1
 8000bcc:	d0f9      	beq.n	8000bc2 <__aeabi_fdiv+0xc2>
 8000bce:	ea40 000c 	orr.w	r0, r0, ip
 8000bd2:	f093 0f00 	teq	r3, #0
 8000bd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bda:	bf02      	ittt	eq
 8000bdc:	0049      	lsleq	r1, r1, #1
 8000bde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000be2:	3b01      	subeq	r3, #1
 8000be4:	d0f9      	beq.n	8000bda <__aeabi_fdiv+0xda>
 8000be6:	ea41 010c 	orr.w	r1, r1, ip
 8000bea:	e795      	b.n	8000b18 <__aeabi_fdiv+0x18>
 8000bec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bf0:	ea92 0f0c 	teq	r2, ip
 8000bf4:	d108      	bne.n	8000c08 <__aeabi_fdiv+0x108>
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	f47f af7d 	bne.w	8000af6 <__aeabi_fmul+0x15e>
 8000bfc:	ea93 0f0c 	teq	r3, ip
 8000c00:	f47f af70 	bne.w	8000ae4 <__aeabi_fmul+0x14c>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e776      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c08:	ea93 0f0c 	teq	r3, ip
 8000c0c:	d104      	bne.n	8000c18 <__aeabi_fdiv+0x118>
 8000c0e:	024b      	lsls	r3, r1, #9
 8000c10:	f43f af4c 	beq.w	8000aac <__aeabi_fmul+0x114>
 8000c14:	4608      	mov	r0, r1
 8000c16:	e76e      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c1c:	bf18      	it	ne
 8000c1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c22:	d1ca      	bne.n	8000bba <__aeabi_fdiv+0xba>
 8000c24:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c28:	f47f af5c 	bne.w	8000ae4 <__aeabi_fmul+0x14c>
 8000c2c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c30:	f47f af3c 	bne.w	8000aac <__aeabi_fmul+0x114>
 8000c34:	e75f      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c36:	bf00      	nop

08000c38 <__aeabi_f2uiz>:
 8000c38:	0042      	lsls	r2, r0, #1
 8000c3a:	d20e      	bcs.n	8000c5a <__aeabi_f2uiz+0x22>
 8000c3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c40:	d30b      	bcc.n	8000c5a <__aeabi_f2uiz+0x22>
 8000c42:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c4a:	d409      	bmi.n	8000c60 <__aeabi_f2uiz+0x28>
 8000c4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c54:	fa23 f002 	lsr.w	r0, r3, r2
 8000c58:	4770      	bx	lr
 8000c5a:	f04f 0000 	mov.w	r0, #0
 8000c5e:	4770      	bx	lr
 8000c60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c64:	d101      	bne.n	8000c6a <__aeabi_f2uiz+0x32>
 8000c66:	0242      	lsls	r2, r0, #9
 8000c68:	d102      	bne.n	8000c70 <__aeabi_f2uiz+0x38>
 8000c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_I2C1_Init+0x54>)
 8000c80:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_I2C1_Init+0x58>)
 8000c86:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb6:	f000 fe47 	bl	8001948 <HAL_I2C_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000cc0:	f000 f998 	bl	8000ff4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000098 	.word	0x20000098
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	000186a0 	.word	0x000186a0

08000cd4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b08b      	sub	sp, #44	; 0x2c
 8000cd8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cda:	f000 faf7 	bl	80012cc <HAL_Init>
	  int16_t val;
	  float temp_c;
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cde:	f000 f8af 	bl	8000e40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ce2:	f000 f919 	bl	8000f18 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ce6:	f000 f8ed 	bl	8000ec4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000cea:	f7ff ffc5 	bl	8000c78 <MX_I2C1_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		int k = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf2:	4849      	ldr	r0, [pc, #292]	; (8000e18 <main+0x144>)
 8000cf4:	f000 fdd6 	bl	80018a4 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, k);
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	2120      	movs	r1, #32
 8000d04:	4845      	ldr	r0, [pc, #276]	; (8000e1c <main+0x148>)
 8000d06:	f000 fde4 	bl	80018d2 <HAL_GPIO_WritePin>

		/* USER CODE BEGIN 3 */


	    // Tell TMP102 that we want to read from the temperature register
	    buf[0] = REG_TEMP;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	713b      	strb	r3, [r7, #4]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000d0e:	2390      	movs	r3, #144	; 0x90
 8000d10:	b299      	uxth	r1, r3
 8000d12:	1d3a      	adds	r2, r7, #4
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	4840      	ldr	r0, [pc, #256]	; (8000e20 <main+0x14c>)
 8000d1e:	f000 ff3b 	bl	8001b98 <HAL_I2C_Master_Transmit>
 8000d22:	4603      	mov	r3, r0
 8000d24:	75fb      	strb	r3, [r7, #23]
	    if ( ret != HAL_OK ) {
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d008      	beq.n	8000d3e <main+0x6a>
	      strcpy((char*)buf, "Error Tx\r\n");
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	4a3d      	ldr	r2, [pc, #244]	; (8000e24 <main+0x150>)
 8000d30:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d32:	c303      	stmia	r3!, {r0, r1}
 8000d34:	801a      	strh	r2, [r3, #0]
 8000d36:	3302      	adds	r3, #2
 8000d38:	0c12      	lsrs	r2, r2, #16
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e05c      	b.n	8000df8 <main+0x124>
	    } else {

	      // Read 2 bytes from the temperature register
	      ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 8000d3e:	2390      	movs	r3, #144	; 0x90
 8000d40:	b299      	uxth	r1, r3
 8000d42:	1d3a      	adds	r2, r7, #4
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	4834      	ldr	r0, [pc, #208]	; (8000e20 <main+0x14c>)
 8000d4e:	f001 f821 	bl	8001d94 <HAL_I2C_Master_Receive>
 8000d52:	4603      	mov	r3, r0
 8000d54:	75fb      	strb	r3, [r7, #23]
	      if ( ret != HAL_OK ) {
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d008      	beq.n	8000d6e <main+0x9a>
	        strcpy((char*)buf, "Error Rx\r\n");
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4a32      	ldr	r2, [pc, #200]	; (8000e28 <main+0x154>)
 8000d60:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d62:	c303      	stmia	r3!, {r0, r1}
 8000d64:	801a      	strh	r2, [r3, #0]
 8000d66:	3302      	adds	r3, #2
 8000d68:	0c12      	lsrs	r2, r2, #16
 8000d6a:	701a      	strb	r2, [r3, #0]
 8000d6c:	e044      	b.n	8000df8 <main+0x124>
	      } else {

	        //Combine the bytes
	        val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000d6e:	793b      	ldrb	r3, [r7, #4]
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	797b      	ldrb	r3, [r7, #5]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	83fb      	strh	r3, [r7, #30]

	        // Convert to 2's complement, since temperature can be negative
	        if ( val > 0x7FF ) {
 8000d80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d88:	db05      	blt.n	8000d96 <main+0xc2>
	          val |= 0xF000;
 8000d8a:	8bfb      	ldrh	r3, [r7, #30]
 8000d8c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000d90:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000d94:	83fb      	strh	r3, [r7, #30]
	        }

	        // Convert to float temperature value (Celsius)
	        temp_c = val * 0.0625;
 8000d96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fb30 	bl	8000400 <__aeabi_i2d>
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <main+0x158>)
 8000da6:	f7ff fb95 	bl	80004d4 <__aeabi_dmul>
 8000daa:	4603      	mov	r3, r0
 8000dac:	460c      	mov	r4, r1
 8000dae:	4618      	mov	r0, r3
 8000db0:	4621      	mov	r1, r4
 8000db2:	f7ff fda1 	bl	80008f8 <__aeabi_d2f>
 8000db6:	4603      	mov	r3, r0
 8000db8:	613b      	str	r3, [r7, #16]

	        // Convert temperature to decimal format
	        temp_c *= 100;
 8000dba:	491d      	ldr	r1, [pc, #116]	; (8000e30 <main+0x15c>)
 8000dbc:	6938      	ldr	r0, [r7, #16]
 8000dbe:	f7ff fdeb 	bl	8000998 <__aeabi_fmul>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	613b      	str	r3, [r7, #16]
	        sprintf((char*)buf,
	              "%u.%u C\r\n",
	              ((unsigned int)temp_c / 100),
 8000dc6:	6938      	ldr	r0, [r7, #16]
 8000dc8:	f7ff ff36 	bl	8000c38 <__aeabi_f2uiz>
 8000dcc:	4602      	mov	r2, r0
	        sprintf((char*)buf,
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <main+0x160>)
 8000dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8000dd4:	095c      	lsrs	r4, r3, #5
	              ((unsigned int)temp_c % 100));
 8000dd6:	6938      	ldr	r0, [r7, #16]
 8000dd8:	f7ff ff2e 	bl	8000c38 <__aeabi_f2uiz>
 8000ddc:	4602      	mov	r2, r0
	        sprintf((char*)buf,
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <main+0x160>)
 8000de0:	fba3 1302 	umull	r1, r3, r3, r2
 8000de4:	095b      	lsrs	r3, r3, #5
 8000de6:	2164      	movs	r1, #100	; 0x64
 8000de8:	fb01 f303 	mul.w	r3, r1, r3
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	1d38      	adds	r0, r7, #4
 8000df0:	4622      	mov	r2, r4
 8000df2:	4911      	ldr	r1, [pc, #68]	; (8000e38 <main+0x164>)
 8000df4:	f002 fb5c 	bl	80034b0 <siprintf>
	      }
	    }

	    // Send out buffer (temperature or error message)
	    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff f9a6 	bl	800014c <strlen>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	1d39      	adds	r1, r7, #4
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <main+0x168>)
 8000e0c:	f002 f961 	bl	80030d2 <HAL_UART_Transmit>

	    // Wait
	    HAL_Delay(50);
 8000e10:	2032      	movs	r0, #50	; 0x32
 8000e12:	f000 fabd 	bl	8001390 <HAL_Delay>
	while (1) {
 8000e16:	e76a      	b.n	8000cee <main+0x1a>
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	20000098 	.word	0x20000098
 8000e24:	08003cec 	.word	0x08003cec
 8000e28:	08003cf8 	.word	0x08003cf8
 8000e2c:	3fb00000 	.word	0x3fb00000
 8000e30:	42c80000 	.word	0x42c80000
 8000e34:	51eb851f 	.word	0x51eb851f
 8000e38:	08003d04 	.word	0x08003d04
 8000e3c:	200000ec 	.word	0x200000ec

08000e40 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b090      	sub	sp, #64	; 0x40
 8000e44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	2228      	movs	r2, #40	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fb26 	bl	80034a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e76:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fcbd 	bl	8002800 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x50>
		Error_Handler();
 8000e8c:	f000 f8b2 	bl	8000ff4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2302      	movs	r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 ff28 	bl	8002d00 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x7a>
		Error_Handler();
 8000eb6:	f000 f89d 	bl	8000ff4 <Error_Handler>
	}
}
 8000eba:	bf00      	nop
 8000ebc:	3740      	adds	r7, #64	; 0x40
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MX_USART2_UART_Init+0x50>)
 8000ecc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000efc:	f002 f89c 	bl	8003038 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000f06:	f000 f875 	bl	8000ff4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000ec 	.word	0x200000ec
 8000f14:	40004400 	.word	0x40004400

08000f18 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a2c      	ldr	r2, [pc, #176]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f4a:	f043 0320 	orr.w	r3, r3, #32
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0320 	and.w	r3, r3, #32
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f7a:	f043 0308 	orr.w	r3, r3, #8
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_GPIO_Init+0xcc>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4815      	ldr	r0, [pc, #84]	; (8000fe8 <MX_GPIO_Init+0xd0>)
 8000f92:	f000 fc9e 	bl	80018d2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <MX_GPIO_Init+0xd8>)
 8000fac:	f000 fb20 	bl	80015f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <MX_GPIO_Init+0xd0>)
 8000fc8:	f000 fb12 	bl	80015f0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2028      	movs	r0, #40	; 0x28
 8000fd2:	f000 fad6 	bl	8001582 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd6:	2028      	movs	r0, #40	; 0x28
 8000fd8:	f000 faef 	bl	80015ba <HAL_NVIC_EnableIRQ>

}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010800 	.word	0x40010800
 8000fec:	10110000 	.word	0x10110000
 8000ff0:	40011000 	.word	0x40011000

08000ff4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_MspInit+0x5c>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_MspInit+0x5c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6193      	str	r3, [r2, #24]
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_MspInit+0x5c>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <HAL_MspInit+0x5c>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <HAL_MspInit+0x5c>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HAL_MspInit+0x5c>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_MspInit+0x60>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_MspInit+0x60>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000

08001064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <HAL_I2C_MspInit+0x70>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d123      	bne.n	80010cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 800108a:	f043 0308 	orr.w	r3, r3, #8
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800109c:	23c0      	movs	r3, #192	; 0xc0
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a0:	2312      	movs	r3, #18
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <HAL_I2C_MspInit+0x78>)
 80010b0:	f000 fa9e 	bl	80015f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 80010ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010be:	61d3      	str	r3, [r2, #28]
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40005400 	.word	0x40005400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010c00 	.word	0x40010c00

080010e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_UART_MspInit+0x70>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d123      	bne.n	8001148 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_UART_MspInit+0x74>)
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	4a13      	ldr	r2, [pc, #76]	; (8001154 <HAL_UART_MspInit+0x74>)
 8001106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110a:	61d3      	str	r3, [r2, #28]
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_UART_MspInit+0x74>)
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_UART_MspInit+0x74>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_UART_MspInit+0x74>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_UART_MspInit+0x74>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001130:	230c      	movs	r3, #12
 8001132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2302      	movs	r3, #2
 800113a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <HAL_UART_MspInit+0x78>)
 8001144:	f000 fa54 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40004400 	.word	0x40004400
 8001154:	40021000 	.word	0x40021000
 8001158:	40010800 	.word	0x40010800

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <HardFault_Handler+0x4>

0800116e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <MemManage_Handler+0x4>

08001174 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <BusFault_Handler+0x4>

0800117a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <UsageFault_Handler+0x4>

08001180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 f8d6 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011b8:	f000 fba4 	bl	8001904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x50>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x16>
		heap_end = &end;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <_sbrk+0x50>)
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <_sbrk+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <_sbrk+0x50>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <_sbrk+0x50>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	466a      	mov	r2, sp
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d907      	bls.n	80011fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ea:	f002 f92f 	bl	800344c <__errno>
 80011ee:	4602      	mov	r2, r0
 80011f0:	230c      	movs	r3, #12
 80011f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	e006      	b.n	8001208 <_sbrk+0x48>
	}

	heap_end += incr;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <_sbrk+0x50>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a03      	ldr	r2, [pc, #12]	; (8001210 <_sbrk+0x50>)
 8001204:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000008c 	.word	0x2000008c
 8001214:	20000138 	.word	0x20000138

08001218 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <SystemInit+0x5c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <SystemInit+0x5c>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <SystemInit+0x5c>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4911      	ldr	r1, [pc, #68]	; (8001274 <SystemInit+0x5c>)
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <SystemInit+0x60>)
 8001230:	4013      	ands	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <SystemInit+0x5c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <SystemInit+0x5c>)
 800123a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <SystemInit+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SystemInit+0x5c>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <SystemInit+0x5c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <SystemInit+0x5c>)
 8001256:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800125a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SystemInit+0x5c>)
 800125e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001262:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SystemInit+0x64>)
 8001266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126a:	609a      	str	r2, [r3, #8]
#endif 
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000
 8001278:	f8ff0000 	.word	0xf8ff0000
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001280:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001282:	e003      	b.n	800128c <LoopCopyDataInit>

08001284 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001286:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001288:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800128a:	3104      	adds	r1, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800128c:	480a      	ldr	r0, [pc, #40]	; (80012b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001290:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001292:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001294:	d3f6      	bcc.n	8001284 <CopyDataInit>
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001298:	e002      	b.n	80012a0 <LoopFillZerobss>

0800129a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800129c:	f842 3b04 	str.w	r3, [r2], #4

080012a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012a4:	d3f9      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012a6:	f7ff ffb7 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f002 f8d5 	bl	8003458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ae:	f7ff fd11 	bl	8000cd4 <main>
  bx lr
 80012b2:	4770      	bx	lr
  ldr r3, =_sidata
 80012b4:	08003d78 	.word	0x08003d78
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012bc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80012c0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80012c4:	20000134 	.word	0x20000134

080012c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_2_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_Init+0x28>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_Init+0x28>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f945 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f808 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fe8a 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40022000 	.word	0x40022000

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f95d 	bl	80015d6 <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f925 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	20000008 	.word	0x20000008
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_IncTick+0x1c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x20>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a03      	ldr	r2, [pc, #12]	; (8001378 <HAL_IncTick+0x20>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000008 	.word	0x20000008
 8001378:	2000012c 	.word	0x2000012c

0800137c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <HAL_GetTick+0x10>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	2000012c 	.word	0x2000012c

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff fff0 	bl	800137c <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_Delay+0x40>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffe0 	bl	800137c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000008 	.word	0x20000008

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4906      	ldr	r1, [pc, #24]	; (800146c <__NVIC_EnableIRQ+0x34>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff90 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff2d 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff42 	bl	800141c <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff35 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b08b      	sub	sp, #44	; 0x2c
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	e127      	b.n	8001854 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001604:	2201      	movs	r2, #1
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 8116 	bne.w	800184e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b12      	cmp	r3, #18
 8001628:	d034      	beq.n	8001694 <HAL_GPIO_Init+0xa4>
 800162a:	2b12      	cmp	r3, #18
 800162c:	d80d      	bhi.n	800164a <HAL_GPIO_Init+0x5a>
 800162e:	2b02      	cmp	r3, #2
 8001630:	d02b      	beq.n	800168a <HAL_GPIO_Init+0x9a>
 8001632:	2b02      	cmp	r3, #2
 8001634:	d804      	bhi.n	8001640 <HAL_GPIO_Init+0x50>
 8001636:	2b00      	cmp	r3, #0
 8001638:	d031      	beq.n	800169e <HAL_GPIO_Init+0xae>
 800163a:	2b01      	cmp	r3, #1
 800163c:	d01c      	beq.n	8001678 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800163e:	e048      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001640:	2b03      	cmp	r3, #3
 8001642:	d043      	beq.n	80016cc <HAL_GPIO_Init+0xdc>
 8001644:	2b11      	cmp	r3, #17
 8001646:	d01b      	beq.n	8001680 <HAL_GPIO_Init+0x90>
          break;
 8001648:	e043      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800164a:	4a89      	ldr	r2, [pc, #548]	; (8001870 <HAL_GPIO_Init+0x280>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d026      	beq.n	800169e <HAL_GPIO_Init+0xae>
 8001650:	4a87      	ldr	r2, [pc, #540]	; (8001870 <HAL_GPIO_Init+0x280>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d806      	bhi.n	8001664 <HAL_GPIO_Init+0x74>
 8001656:	4a87      	ldr	r2, [pc, #540]	; (8001874 <HAL_GPIO_Init+0x284>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d020      	beq.n	800169e <HAL_GPIO_Init+0xae>
 800165c:	4a86      	ldr	r2, [pc, #536]	; (8001878 <HAL_GPIO_Init+0x288>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d01d      	beq.n	800169e <HAL_GPIO_Init+0xae>
          break;
 8001662:	e036      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001664:	4a85      	ldr	r2, [pc, #532]	; (800187c <HAL_GPIO_Init+0x28c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d019      	beq.n	800169e <HAL_GPIO_Init+0xae>
 800166a:	4a85      	ldr	r2, [pc, #532]	; (8001880 <HAL_GPIO_Init+0x290>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d016      	beq.n	800169e <HAL_GPIO_Init+0xae>
 8001670:	4a84      	ldr	r2, [pc, #528]	; (8001884 <HAL_GPIO_Init+0x294>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0xae>
          break;
 8001676:	e02c      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e028      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	3304      	adds	r3, #4
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e023      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	3308      	adds	r3, #8
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e01e      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	330c      	adds	r3, #12
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e019      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016a6:	2304      	movs	r3, #4
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e012      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b4:	2308      	movs	r3, #8
 80016b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	611a      	str	r2, [r3, #16]
          break;
 80016be:	e008      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c0:	2308      	movs	r3, #8
 80016c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	615a      	str	r2, [r3, #20]
          break;
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2bff      	cmp	r3, #255	; 0xff
 80016d6:	d801      	bhi.n	80016dc <HAL_GPIO_Init+0xec>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	e001      	b.n	80016e0 <HAL_GPIO_Init+0xf0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3304      	adds	r3, #4
 80016e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2bff      	cmp	r3, #255	; 0xff
 80016e6:	d802      	bhi.n	80016ee <HAL_GPIO_Init+0xfe>
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x104>
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	3b08      	subs	r3, #8
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	210f      	movs	r1, #15
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	401a      	ands	r2, r3
 8001706:	6a39      	ldr	r1, [r7, #32]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	431a      	orrs	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8096 	beq.w	800184e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001722:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_GPIO_Init+0x298>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_GPIO_Init+0x298>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	4b56      	ldr	r3, [pc, #344]	; (8001888 <HAL_GPIO_Init+0x298>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800173a:	4a54      	ldr	r2, [pc, #336]	; (800188c <HAL_GPIO_Init+0x29c>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4013      	ands	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4b      	ldr	r2, [pc, #300]	; (8001890 <HAL_GPIO_Init+0x2a0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x19e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4a      	ldr	r2, [pc, #296]	; (8001894 <HAL_GPIO_Init+0x2a4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x19a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a49      	ldr	r2, [pc, #292]	; (8001898 <HAL_GPIO_Init+0x2a8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x196>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a48      	ldr	r2, [pc, #288]	; (800189c <HAL_GPIO_Init+0x2ac>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x192>
 800177e:	2303      	movs	r3, #3
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x1a0>
 8001782:	2304      	movs	r3, #4
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x1a0>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x1a0>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x1a0>
 800178e:	2300      	movs	r3, #0
 8001790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017a0:	493a      	ldr	r1, [pc, #232]	; (800188c <HAL_GPIO_Init+0x29c>)
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4938      	ldr	r1, [pc, #224]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
 80017c6:	e006      	b.n	80017d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4933      	ldr	r1, [pc, #204]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017e2:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	492e      	ldr	r1, [pc, #184]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4929      	ldr	r1, [pc, #164]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	4924      	ldr	r1, [pc, #144]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
 8001816:	e006      	b.n	8001826 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	43db      	mvns	r3, r3
 8001820:	491f      	ldr	r1, [pc, #124]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001822:	4013      	ands	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	491a      	ldr	r1, [pc, #104]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	60cb      	str	r3, [r1, #12]
 800183e:	e006      	b.n	800184e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	43db      	mvns	r3, r3
 8001848:	4915      	ldr	r1, [pc, #84]	; (80018a0 <HAL_GPIO_Init+0x2b0>)
 800184a:	4013      	ands	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	3301      	adds	r3, #1
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	f47f aed0 	bne.w	8001604 <HAL_GPIO_Init+0x14>
  }
}
 8001864:	bf00      	nop
 8001866:	372c      	adds	r7, #44	; 0x2c
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	10210000 	.word	0x10210000
 8001874:	10110000 	.word	0x10110000
 8001878:	10120000 	.word	0x10120000
 800187c:	10310000 	.word	0x10310000
 8001880:	10320000 	.word	0x10320000
 8001884:	10220000 	.word	0x10220000
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	40010800 	.word	0x40010800
 8001894:	40010c00 	.word	0x40010c00
 8001898:	40011000 	.word	0x40011000
 800189c:	40011400 	.word	0x40011400
 80018a0:	40010400 	.word	0x40010400

080018a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]
 80018de:	4613      	mov	r3, r2
 80018e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e2:	787b      	ldrb	r3, [r7, #1]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e8:	887a      	ldrh	r2, [r7, #2]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018ee:	e003      	b.n	80018f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	041a      	lsls	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
	...

08001904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f806 	bl	8001934 <HAL_GPIO_EXTI_Callback>
  }
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e10f      	b.n	8001b7a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fb78 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2224      	movs	r2, #36	; 0x24
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800198c:	f001 fb0e 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8001990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4a7b      	ldr	r2, [pc, #492]	; (8001b84 <HAL_I2C_Init+0x23c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d807      	bhi.n	80019ac <HAL_I2C_Init+0x64>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4a7a      	ldr	r2, [pc, #488]	; (8001b88 <HAL_I2C_Init+0x240>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	bf94      	ite	ls
 80019a4:	2301      	movls	r3, #1
 80019a6:	2300      	movhi	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	e006      	b.n	80019ba <HAL_I2C_Init+0x72>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a77      	ldr	r2, [pc, #476]	; (8001b8c <HAL_I2C_Init+0x244>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	bf94      	ite	ls
 80019b4:	2301      	movls	r3, #1
 80019b6:	2300      	movhi	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0db      	b.n	8001b7a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_I2C_Init+0x248>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0c9b      	lsrs	r3, r3, #18
 80019cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a64      	ldr	r2, [pc, #400]	; (8001b84 <HAL_I2C_Init+0x23c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d802      	bhi.n	80019fc <HAL_I2C_Init+0xb4>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	3301      	adds	r3, #1
 80019fa:	e009      	b.n	8001a10 <HAL_I2C_Init+0xc8>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	4a63      	ldr	r2, [pc, #396]	; (8001b94 <HAL_I2C_Init+0x24c>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	3301      	adds	r3, #1
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	430b      	orrs	r3, r1
 8001a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4956      	ldr	r1, [pc, #344]	; (8001b84 <HAL_I2C_Init+0x23c>)
 8001a2c:	428b      	cmp	r3, r1
 8001a2e:	d80d      	bhi.n	8001a4c <HAL_I2C_Init+0x104>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e59      	subs	r1, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	bf38      	it	cc
 8001a48:	2304      	movcc	r3, #4
 8001a4a:	e04f      	b.n	8001aec <HAL_I2C_Init+0x1a4>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d111      	bne.n	8001a78 <HAL_I2C_Init+0x130>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	440b      	add	r3, r1
 8001a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	e012      	b.n	8001a9e <HAL_I2C_Init+0x156>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1e58      	subs	r0, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	0099      	lsls	r1, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_Init+0x15e>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e022      	b.n	8001aec <HAL_I2C_Init+0x1a4>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10e      	bne.n	8001acc <HAL_I2C_Init+0x184>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1e58      	subs	r0, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6859      	ldr	r1, [r3, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	440b      	add	r3, r1
 8001abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aca:	e00f      	b.n	8001aec <HAL_I2C_Init+0x1a4>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1e58      	subs	r0, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	0099      	lsls	r1, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	6809      	ldr	r1, [r1, #0]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6911      	ldr	r1, [r2, #16]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68d2      	ldr	r2, [r2, #12]
 8001b26:	4311      	orrs	r1, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	000186a0 	.word	0x000186a0
 8001b88:	001e847f 	.word	0x001e847f
 8001b8c:	003d08ff 	.word	0x003d08ff
 8001b90:	431bde83 	.word	0x431bde83
 8001b94:	10624dd3 	.word	0x10624dd3

08001b98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	817b      	strh	r3, [r7, #10]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff fbe6 	bl	800137c <HAL_GetTick>
 8001bb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b20      	cmp	r3, #32
 8001bbc:	f040 80e0 	bne.w	8001d80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2319      	movs	r3, #25
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4970      	ldr	r1, [pc, #448]	; (8001d8c <HAL_I2C_Master_Transmit+0x1f4>)
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fc3c 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e0d3      	b.n	8001d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_I2C_Master_Transmit+0x50>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e0cc      	b.n	8001d82 <HAL_I2C_Master_Transmit+0x1ea>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d007      	beq.n	8001c0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0201 	orr.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2221      	movs	r2, #33	; 0x21
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2210      	movs	r2, #16
 8001c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	893a      	ldrh	r2, [r7, #8]
 8001c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4a50      	ldr	r2, [pc, #320]	; (8001d90 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c50:	8979      	ldrh	r1, [r7, #10]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	6a3a      	ldr	r2, [r7, #32]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 faca 	bl	80021f0 <I2C_MasterRequestWrite>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e08d      	b.n	8001d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c7c:	e066      	b.n	8001d4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	6a39      	ldr	r1, [r7, #32]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 fcb6 	bl	80025f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00d      	beq.n	8001caa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d107      	bne.n	8001ca6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e06b      	b.n	8001d82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	781a      	ldrb	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d11b      	bne.n	8001d20 <HAL_I2C_Master_Transmit+0x188>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d017      	beq.n	8001d20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	6a39      	ldr	r1, [r7, #32]
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 fca6 	bl	8002676 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00d      	beq.n	8001d4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d107      	bne.n	8001d48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e01a      	b.n	8001d82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d194      	bne.n	8001c7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e000      	b.n	8001d82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d80:	2302      	movs	r3, #2
  }
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	00100002 	.word	0x00100002
 8001d90:	ffff0000 	.word	0xffff0000

08001d94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	; 0x30
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	460b      	mov	r3, r1
 8001da2:	817b      	strh	r3, [r7, #10]
 8001da4:	4613      	mov	r3, r2
 8001da6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff fae8 	bl	800137c <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	f040 8213 	bne.w	80021e2 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2319      	movs	r3, #25
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	497e      	ldr	r1, [pc, #504]	; (8001fc0 <HAL_I2C_Master_Receive+0x22c>)
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fb3e 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e206      	b.n	80021e4 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_I2C_Master_Receive+0x50>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e1ff      	b.n	80021e4 <HAL_I2C_Master_Receive+0x450>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d007      	beq.n	8001e0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2222      	movs	r2, #34	; 0x22
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2210      	movs	r2, #16
 8001e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	893a      	ldrh	r2, [r7, #8]
 8001e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4a5e      	ldr	r2, [pc, #376]	; (8001fc4 <HAL_I2C_Master_Receive+0x230>)
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e4c:	8979      	ldrh	r1, [r7, #10]
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fa42 	bl	80022dc <I2C_MasterRequestRead>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1c0      	b.n	80021e4 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d113      	bne.n	8001e92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	623b      	str	r3, [r7, #32]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	623b      	str	r3, [r7, #32]
 8001e7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e194      	b.n	80021bc <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d11d      	bne.n	8001ed6 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eaa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed2:	b662      	cpsie	i
 8001ed4:	e172      	b.n	80021bc <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d11d      	bne.n	8001f1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eee:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f16:	b662      	cpsie	i
 8001f18:	e150      	b.n	80021bc <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f40:	e13c      	b.n	80021bc <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	f200 80f5 	bhi.w	8002136 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d123      	bne.n	8001f9c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 fbcd 	bl	80026f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e13d      	b.n	80021e4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f9a:	e10f      	b.n	80021bc <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d150      	bne.n	8002046 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001faa:	2200      	movs	r2, #0
 8001fac:	4906      	ldr	r1, [pc, #24]	; (8001fc8 <HAL_I2C_Master_Receive+0x234>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fa4a 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e112      	b.n	80021e4 <HAL_I2C_Master_Receive+0x450>
 8001fbe:	bf00      	nop
 8001fc0:	00100002 	.word	0x00100002
 8001fc4:	ffff0000 	.word	0xffff0000
 8001fc8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fdc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002010:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002044:	e0ba      	b.n	80021bc <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	2200      	movs	r2, #0
 800204e:	4967      	ldr	r1, [pc, #412]	; (80021ec <HAL_I2C_Master_Receive+0x458>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f9f9 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0c1      	b.n	80021e4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	2200      	movs	r2, #0
 80020ac:	494f      	ldr	r1, [pc, #316]	; (80021ec <HAL_I2C_Master_Receive+0x458>)
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f9ca 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e092      	b.n	80021e4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020cc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002100:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002134:	e042      	b.n	80021bc <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 fadc 	bl	80026f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e04c      	b.n	80021e4 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d118      	bne.n	80021bc <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f47f aebe 	bne.w	8001f42 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3728      	adds	r7, #40	; 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	00010004 	.word	0x00010004

080021f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	460b      	mov	r3, r1
 80021fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d006      	beq.n	800221a <I2C_MasterRequestWrite+0x2a>
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d003      	beq.n	800221a <I2C_MasterRequestWrite+0x2a>
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002218:	d108      	bne.n	800222c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e00b      	b.n	8002244 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	2b12      	cmp	r3, #18
 8002232:	d107      	bne.n	8002244 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002242:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f8f9 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e035      	b.n	80022cc <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002268:	d108      	bne.n	800227c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800226a:	897b      	ldrh	r3, [r7, #10]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	e01b      	b.n	80022b4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800227c:	897b      	ldrh	r3, [r7, #10]
 800227e:	11db      	asrs	r3, r3, #7
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 0306 	and.w	r3, r3, #6
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f063 030f 	orn	r3, r3, #15
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	490e      	ldr	r1, [pc, #56]	; (80022d4 <I2C_MasterRequestWrite+0xe4>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f92b 	bl	80024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e010      	b.n	80022cc <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <I2C_MasterRequestWrite+0xe8>)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f91b 	bl	80024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	00010008 	.word	0x00010008
 80022d8:	00010002 	.word	0x00010002

080022dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	460b      	mov	r3, r1
 80022ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002300:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d006      	beq.n	8002316 <I2C_MasterRequestRead+0x3a>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d003      	beq.n	8002316 <I2C_MasterRequestRead+0x3a>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002314:	d108      	bne.n	8002328 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e00b      	b.n	8002340 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	2b11      	cmp	r3, #17
 800232e:	d107      	bne.n	8002340 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f87b 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e06d      	b.n	8002438 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002364:	d108      	bne.n	8002378 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002366:	897b      	ldrh	r3, [r7, #10]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	e053      	b.n	8002420 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002378:	897b      	ldrh	r3, [r7, #10]
 800237a:	11db      	asrs	r3, r3, #7
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f003 0306 	and.w	r3, r3, #6
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f063 030f 	orn	r3, r3, #15
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	492a      	ldr	r1, [pc, #168]	; (8002440 <I2C_MasterRequestRead+0x164>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f8ad 	bl	80024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e048      	b.n	8002438 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023a6:	897b      	ldrh	r3, [r7, #10]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4923      	ldr	r1, [pc, #140]	; (8002444 <I2C_MasterRequestRead+0x168>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f89d 	bl	80024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e038      	b.n	8002438 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f825 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e017      	b.n	8002438 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002408:	897b      	ldrh	r3, [r7, #10]
 800240a:	11db      	asrs	r3, r3, #7
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f003 0306 	and.w	r3, r3, #6
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f063 030e 	orn	r3, r3, #14
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <I2C_MasterRequestRead+0x168>)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f865 	bl	80024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	00010008 	.word	0x00010008
 8002444:	00010002 	.word	0x00010002

08002448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002458:	e025      	b.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d021      	beq.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002462:	f7fe ff8b 	bl	800137c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d302      	bcc.n	8002478 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d116      	bne.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f043 0220 	orr.w	r2, r3, #32
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e023      	b.n	80024ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	0c1b      	lsrs	r3, r3, #16
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d10d      	bne.n	80024cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf0c      	ite	eq
 80024c2:	2301      	moveq	r3, #1
 80024c4:	2300      	movne	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	e00c      	b.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4013      	ands	r3, r2
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf0c      	ite	eq
 80024de:	2301      	moveq	r3, #1
 80024e0:	2300      	movne	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d0b6      	beq.n	800245a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002504:	e051      	b.n	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002514:	d123      	bne.n	800255e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002524:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800252e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f043 0204 	orr.w	r2, r3, #4
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e046      	b.n	80025ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d021      	beq.n	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7fe ff09 	bl	800137c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d116      	bne.n	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f043 0220 	orr.w	r2, r3, #32
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e020      	b.n	80025ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d10c      	bne.n	80025ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4013      	ands	r3, r2
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	e00b      	b.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	43da      	mvns	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	4013      	ands	r3, r2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d18d      	bne.n	8002506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002600:	e02d      	b.n	800265e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f8ce 	bl	80027a4 <I2C_IsAcknowledgeFailed>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e02d      	b.n	800266e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d021      	beq.n	800265e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261a:	f7fe feaf 	bl	800137c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	429a      	cmp	r2, r3
 8002628:	d302      	bcc.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d116      	bne.n	800265e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f043 0220 	orr.w	r2, r3, #32
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e007      	b.n	800266e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b80      	cmp	r3, #128	; 0x80
 800266a:	d1ca      	bne.n	8002602 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002682:	e02d      	b.n	80026e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f88d 	bl	80027a4 <I2C_IsAcknowledgeFailed>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e02d      	b.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d021      	beq.n	80026e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269c:	f7fe fe6e 	bl	800137c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d302      	bcc.n	80026b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d116      	bne.n	80026e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e007      	b.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d1ca      	bne.n	8002684 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002704:	e042      	b.n	800278c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b10      	cmp	r3, #16
 8002712:	d119      	bne.n	8002748 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0210 	mvn.w	r2, #16
 800271c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e029      	b.n	800279c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002748:	f7fe fe18 	bl	800137c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	429a      	cmp	r2, r3
 8002756:	d302      	bcc.n	800275e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d116      	bne.n	800278c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e007      	b.n	800279c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d1b5      	bne.n	8002706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ba:	d11b      	bne.n	80027f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f043 0204 	orr.w	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e26c      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8087 	beq.w	800292e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b04      	cmp	r3, #4
 800282a:	d00c      	beq.n	8002846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800282c:	4b8f      	ldr	r3, [pc, #572]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	d112      	bne.n	800285e <HAL_RCC_OscConfig+0x5e>
 8002838:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d10b      	bne.n	800285e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002846:	4b89      	ldr	r3, [pc, #548]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d06c      	beq.n	800292c <HAL_RCC_OscConfig+0x12c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d168      	bne.n	800292c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e246      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x76>
 8002868:	4b80      	ldr	r3, [pc, #512]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7f      	ldr	r2, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e02e      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x98>
 800287e:	4b7b      	ldr	r3, [pc, #492]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a7a      	ldr	r2, [pc, #488]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b78      	ldr	r3, [pc, #480]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a77      	ldr	r2, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e01d      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0xbc>
 80028a2:	4b72      	ldr	r3, [pc, #456]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a71      	ldr	r2, [pc, #452]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6e      	ldr	r2, [pc, #440]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 80028bc:	4b6b      	ldr	r3, [pc, #428]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6a      	ldr	r2, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a67      	ldr	r2, [pc, #412]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7fe fd4e 	bl	800137c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe fd4a 	bl	800137c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1fa      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b5d      	ldr	r3, [pc, #372]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0xe4>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fd3a 	bl	800137c <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe fd36 	bl	800137c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e1e6      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x10c>
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d063      	beq.n	8002a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800293a:	4b4c      	ldr	r3, [pc, #304]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002946:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b08      	cmp	r3, #8
 8002950:	d11c      	bne.n	800298c <HAL_RCC_OscConfig+0x18c>
 8002952:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d116      	bne.n	800298c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x176>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e1ba      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4939      	ldr	r1, [pc, #228]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	e03a      	b.n	8002a02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002994:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe fcef 	bl	800137c <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a2:	f7fe fceb 	bl	800137c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e19b      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4927      	ldr	r1, [pc, #156]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe fcce 	bl	800137c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e4:	f7fe fcca 	bl	800137c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e17a      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d03a      	beq.n	8002a84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d019      	beq.n	8002a4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fcae 	bl	800137c <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a24:	f7fe fcaa 	bl	800137c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e15a      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f000 fada 	bl	8002ffc <RCC_Delay>
 8002a48:	e01c      	b.n	8002a84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7fe fc94 	bl	800137c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a56:	e00f      	b.n	8002a78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a58:	f7fe fc90 	bl	800137c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d908      	bls.n	8002a78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e140      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	42420000 	.word	0x42420000
 8002a74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	4b9e      	ldr	r3, [pc, #632]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e9      	bne.n	8002a58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80a6 	beq.w	8002bde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4b97      	ldr	r3, [pc, #604]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	4b94      	ldr	r3, [pc, #592]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	4a93      	ldr	r2, [pc, #588]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	61d3      	str	r3, [r2, #28]
 8002aae:	4b91      	ldr	r3, [pc, #580]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b8e      	ldr	r3, [pc, #568]	; (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aca:	4b8b      	ldr	r3, [pc, #556]	; (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a8a      	ldr	r2, [pc, #552]	; (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fc51 	bl	800137c <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7fe fc4d 	bl	800137c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b64      	cmp	r3, #100	; 0x64
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0fd      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x312>
 8002b04:	4b7b      	ldr	r3, [pc, #492]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a7a      	ldr	r2, [pc, #488]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e02d      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x334>
 8002b1a:	4b76      	ldr	r3, [pc, #472]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4a75      	ldr	r2, [pc, #468]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6213      	str	r3, [r2, #32]
 8002b26:	4b73      	ldr	r3, [pc, #460]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4a72      	ldr	r2, [pc, #456]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6213      	str	r3, [r2, #32]
 8002b32:	e01c      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x356>
 8002b3c:	4b6d      	ldr	r3, [pc, #436]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a6c      	ldr	r2, [pc, #432]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	e00b      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b56:	4b67      	ldr	r3, [pc, #412]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b64      	ldr	r3, [pc, #400]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a63      	ldr	r2, [pc, #396]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d015      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7fe fc01 	bl	800137c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe fbfd 	bl	800137c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e0ab      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	4b57      	ldr	r3, [pc, #348]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ee      	beq.n	8002b7e <HAL_RCC_OscConfig+0x37e>
 8002ba0:	e014      	b.n	8002bcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fbeb 	bl	800137c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fbe7 	bl	800137c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e095      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ee      	bne.n	8002baa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4a47      	ldr	r2, [pc, #284]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8081 	beq.w	8002cea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be8:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d061      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d146      	bne.n	8002c8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfc:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_RCC_OscConfig+0x4fc>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7fe fbbb 	bl	800137c <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7fe fbb7 	bl	800137c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e067      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1c:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c32:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	492d      	ldr	r1, [pc, #180]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a19      	ldr	r1, [r3, #32]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	430b      	orrs	r3, r1
 8002c56:	4927      	ldr	r1, [pc, #156]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <HAL_RCC_OscConfig+0x4fc>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe fb8b 	bl	800137c <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe fb87 	bl	800137c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e037      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x46a>
 8002c88:	e02f      	b.n	8002cea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HAL_RCC_OscConfig+0x4fc>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fb74 	bl	800137c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fb70 	bl	800137c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e020      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x498>
 8002cb6:	e018      	b.n	8002cea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e013      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	42420060 	.word	0x42420060

08002d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0d0      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d910      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	4965      	ldr	r1, [pc, #404]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b8      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a52      	ldr	r2, [pc, #328]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	494d      	ldr	r1, [pc, #308]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d040      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d115      	bne.n	8002dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbe:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e073      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e06b      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f023 0203 	bic.w	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4936      	ldr	r1, [pc, #216]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df0:	f7fe fac4 	bl	800137c <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df8:	f7fe fac0 	bl	800137c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e053      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 020c 	and.w	r2, r3, #12
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d1eb      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d210      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 0207 	bic.w	r2, r3, #7
 8002e36:	4922      	ldr	r1, [pc, #136]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e032      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4916      	ldr	r1, [pc, #88]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8e:	f000 f821 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002e92:	4601      	mov	r1, r0
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	5cd3      	ldrb	r3, [r2, r3]
 8002ea2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1cc>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fa22 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	08003d24 	.word	0x08003d24
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed4:	b490      	push	{r4, r7}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002edc:	1d3c      	adds	r4, r7, #4
 8002ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ee4:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002efe:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d002      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x40>
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x46>
 8002f12:	e02d      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f16:	623b      	str	r3, [r7, #32]
      break;
 8002f18:	e02d      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	0c9b      	lsrs	r3, r3, #18
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f26:	4413      	add	r3, r2
 8002f28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c5b      	lsrs	r3, r3, #17
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f46:	4413      	add	r3, r2
 8002f48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f52:	fb02 f203 	mul.w	r2, r2, r3
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5e:	e004      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f64:	fb02 f303 	mul.w	r3, r2, r3
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	623b      	str	r3, [r7, #32]
      break;
 8002f6e:	e002      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f72:	623b      	str	r3, [r7, #32]
      break;
 8002f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f76:	6a3b      	ldr	r3, [r7, #32]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3728      	adds	r7, #40	; 0x28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc90      	pop	{r4, r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	08003d10 	.word	0x08003d10
 8002f88:	08003d20 	.word	0x08003d20
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	007a1200 	.word	0x007a1200
 8002f94:	003d0900 	.word	0x003d0900

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000000 	.word	0x20000000

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb0:	f7ff fff2 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4601      	mov	r1, r0
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc2:	5cd3      	ldrb	r3, [r2, r3]
 8002fc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	08003d34 	.word	0x08003d34

08002fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd8:	f7ff ffde 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4601      	mov	r1, r0
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	0adb      	lsrs	r3, r3, #11
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4a03      	ldr	r2, [pc, #12]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fea:	5cd3      	ldrb	r3, [r2, r3]
 8002fec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08003d34 	.word	0x08003d34

08002ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <RCC_Delay+0x34>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <RCC_Delay+0x38>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0a5b      	lsrs	r3, r3, #9
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003018:	bf00      	nop
  }
  while (Delay --);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	60fa      	str	r2, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f9      	bne.n	8003018 <RCC_Delay+0x1c>
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000000 	.word	0x20000000
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e03f      	b.n	80030ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe f83e 	bl	80010e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2224      	movs	r2, #36	; 0x24
 8003068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800307a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f90b 	bl	8003298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003090:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b088      	sub	sp, #32
 80030d6:	af02      	add	r7, sp, #8
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	f040 8083 	bne.w	80031fa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_UART_Transmit+0x2e>
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e07b      	b.n	80031fc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_UART_Transmit+0x40>
 800310e:	2302      	movs	r3, #2
 8003110:	e074      	b.n	80031fc <HAL_UART_Transmit+0x12a>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2221      	movs	r2, #33	; 0x21
 8003124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003128:	f7fe f928 	bl	800137c <HAL_GetTick>
 800312c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800313a:	e042      	b.n	80031c2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003152:	d122      	bne.n	800319a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2200      	movs	r2, #0
 800315c:	2180      	movs	r1, #128	; 0x80
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f850 	bl	8003204 <UART_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e046      	b.n	80031fc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003180:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3302      	adds	r3, #2
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	e017      	b.n	80031c2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3301      	adds	r3, #1
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	e013      	b.n	80031c2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f82d 	bl	8003204 <UART_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e023      	b.n	80031fc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	60ba      	str	r2, [r7, #8]
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1b7      	bne.n	800313c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	2140      	movs	r1, #64	; 0x40
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f814 	bl	8003204 <UART_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e00a      	b.n	80031fc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003214:	e02c      	b.n	8003270 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d028      	beq.n	8003270 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <UART_WaitOnFlagUntilTimeout+0x30>
 8003224:	f7fe f8aa 	bl	800137c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	429a      	cmp	r2, r3
 8003232:	d21d      	bcs.n	8003270 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003242:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e00f      	b.n	8003290 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	429a      	cmp	r2, r3
 800328c:	d0c3      	beq.n	8003216 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032d2:	f023 030c 	bic.w	r3, r3, #12
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	430b      	orrs	r3, r1
 80032de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a52      	ldr	r2, [pc, #328]	; (8003444 <UART_SetConfig+0x1ac>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d14e      	bne.n	800339e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003300:	f7ff fe68 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 8003304:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	4a4a      	ldr	r2, [pc, #296]	; (8003448 <UART_SetConfig+0x1b0>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	0119      	lsls	r1, r3, #4
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fbb2 f2f3 	udiv	r2, r2, r3
 800333c:	4b42      	ldr	r3, [pc, #264]	; (8003448 <UART_SetConfig+0x1b0>)
 800333e:	fba3 0302 	umull	r0, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2064      	movs	r0, #100	; 0x64
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	3332      	adds	r3, #50	; 0x32
 8003350:	4a3d      	ldr	r2, [pc, #244]	; (8003448 <UART_SetConfig+0x1b0>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335c:	4419      	add	r1, r3
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009a      	lsls	r2, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	fbb2 f2f3 	udiv	r2, r2, r3
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <UART_SetConfig+0x1b0>)
 8003376:	fba3 0302 	umull	r0, r3, r3, r2
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2064      	movs	r0, #100	; 0x64
 800337e:	fb00 f303 	mul.w	r3, r0, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	3332      	adds	r3, #50	; 0x32
 8003388:	4a2f      	ldr	r2, [pc, #188]	; (8003448 <UART_SetConfig+0x1b0>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	440a      	add	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800339c:	e04d      	b.n	800343a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800339e:	f7ff fe05 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 80033a2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	009a      	lsls	r2, r3, #2
 80033ae:	441a      	add	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	4a23      	ldr	r2, [pc, #140]	; (8003448 <UART_SetConfig+0x1b0>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	0119      	lsls	r1, r3, #4
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009a      	lsls	r2, r3, #2
 80033ce:	441a      	add	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033da:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <UART_SetConfig+0x1b0>)
 80033dc:	fba3 0302 	umull	r0, r3, r3, r2
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	2064      	movs	r0, #100	; 0x64
 80033e4:	fb00 f303 	mul.w	r3, r0, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	3332      	adds	r3, #50	; 0x32
 80033ee:	4a16      	ldr	r2, [pc, #88]	; (8003448 <UART_SetConfig+0x1b0>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fa:	4419      	add	r1, r3
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	009a      	lsls	r2, r3, #2
 8003406:	441a      	add	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <UART_SetConfig+0x1b0>)
 8003414:	fba3 0302 	umull	r0, r3, r3, r2
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	2064      	movs	r0, #100	; 0x64
 800341c:	fb00 f303 	mul.w	r3, r0, r3
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	3332      	adds	r3, #50	; 0x32
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <UART_SetConfig+0x1b0>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	440a      	add	r2, r1
 8003438:	609a      	str	r2, [r3, #8]
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40013800 	.word	0x40013800
 8003448:	51eb851f 	.word	0x51eb851f

0800344c <__errno>:
 800344c:	4b01      	ldr	r3, [pc, #4]	; (8003454 <__errno+0x8>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	2000000c 	.word	0x2000000c

08003458 <__libc_init_array>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	2500      	movs	r5, #0
 800345c:	4e0c      	ldr	r6, [pc, #48]	; (8003490 <__libc_init_array+0x38>)
 800345e:	4c0d      	ldr	r4, [pc, #52]	; (8003494 <__libc_init_array+0x3c>)
 8003460:	1ba4      	subs	r4, r4, r6
 8003462:	10a4      	asrs	r4, r4, #2
 8003464:	42a5      	cmp	r5, r4
 8003466:	d109      	bne.n	800347c <__libc_init_array+0x24>
 8003468:	f000 fc34 	bl	8003cd4 <_init>
 800346c:	2500      	movs	r5, #0
 800346e:	4e0a      	ldr	r6, [pc, #40]	; (8003498 <__libc_init_array+0x40>)
 8003470:	4c0a      	ldr	r4, [pc, #40]	; (800349c <__libc_init_array+0x44>)
 8003472:	1ba4      	subs	r4, r4, r6
 8003474:	10a4      	asrs	r4, r4, #2
 8003476:	42a5      	cmp	r5, r4
 8003478:	d105      	bne.n	8003486 <__libc_init_array+0x2e>
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003480:	4798      	blx	r3
 8003482:	3501      	adds	r5, #1
 8003484:	e7ee      	b.n	8003464 <__libc_init_array+0xc>
 8003486:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800348a:	4798      	blx	r3
 800348c:	3501      	adds	r5, #1
 800348e:	e7f2      	b.n	8003476 <__libc_init_array+0x1e>
 8003490:	08003d70 	.word	0x08003d70
 8003494:	08003d70 	.word	0x08003d70
 8003498:	08003d70 	.word	0x08003d70
 800349c:	08003d74 	.word	0x08003d74

080034a0 <memset>:
 80034a0:	4603      	mov	r3, r0
 80034a2:	4402      	add	r2, r0
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d100      	bne.n	80034aa <memset+0xa>
 80034a8:	4770      	bx	lr
 80034aa:	f803 1b01 	strb.w	r1, [r3], #1
 80034ae:	e7f9      	b.n	80034a4 <memset+0x4>

080034b0 <siprintf>:
 80034b0:	b40e      	push	{r1, r2, r3}
 80034b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034b6:	b500      	push	{lr}
 80034b8:	b09c      	sub	sp, #112	; 0x70
 80034ba:	ab1d      	add	r3, sp, #116	; 0x74
 80034bc:	9002      	str	r0, [sp, #8]
 80034be:	9006      	str	r0, [sp, #24]
 80034c0:	9107      	str	r1, [sp, #28]
 80034c2:	9104      	str	r1, [sp, #16]
 80034c4:	4808      	ldr	r0, [pc, #32]	; (80034e8 <siprintf+0x38>)
 80034c6:	4909      	ldr	r1, [pc, #36]	; (80034ec <siprintf+0x3c>)
 80034c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80034cc:	9105      	str	r1, [sp, #20]
 80034ce:	6800      	ldr	r0, [r0, #0]
 80034d0:	a902      	add	r1, sp, #8
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	f000 f866 	bl	80035a4 <_svfiprintf_r>
 80034d8:	2200      	movs	r2, #0
 80034da:	9b02      	ldr	r3, [sp, #8]
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	b01c      	add	sp, #112	; 0x70
 80034e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80034e4:	b003      	add	sp, #12
 80034e6:	4770      	bx	lr
 80034e8:	2000000c 	.word	0x2000000c
 80034ec:	ffff0208 	.word	0xffff0208

080034f0 <__ssputs_r>:
 80034f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f4:	688e      	ldr	r6, [r1, #8]
 80034f6:	4682      	mov	sl, r0
 80034f8:	429e      	cmp	r6, r3
 80034fa:	460c      	mov	r4, r1
 80034fc:	4690      	mov	r8, r2
 80034fe:	4699      	mov	r9, r3
 8003500:	d837      	bhi.n	8003572 <__ssputs_r+0x82>
 8003502:	898a      	ldrh	r2, [r1, #12]
 8003504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003508:	d031      	beq.n	800356e <__ssputs_r+0x7e>
 800350a:	2302      	movs	r3, #2
 800350c:	6825      	ldr	r5, [r4, #0]
 800350e:	6909      	ldr	r1, [r1, #16]
 8003510:	1a6f      	subs	r7, r5, r1
 8003512:	6965      	ldr	r5, [r4, #20]
 8003514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003518:	fb95 f5f3 	sdiv	r5, r5, r3
 800351c:	f109 0301 	add.w	r3, r9, #1
 8003520:	443b      	add	r3, r7
 8003522:	429d      	cmp	r5, r3
 8003524:	bf38      	it	cc
 8003526:	461d      	movcc	r5, r3
 8003528:	0553      	lsls	r3, r2, #21
 800352a:	d530      	bpl.n	800358e <__ssputs_r+0x9e>
 800352c:	4629      	mov	r1, r5
 800352e:	f000 fb37 	bl	8003ba0 <_malloc_r>
 8003532:	4606      	mov	r6, r0
 8003534:	b950      	cbnz	r0, 800354c <__ssputs_r+0x5c>
 8003536:	230c      	movs	r3, #12
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	f8ca 3000 	str.w	r3, [sl]
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003546:	81a3      	strh	r3, [r4, #12]
 8003548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354c:	463a      	mov	r2, r7
 800354e:	6921      	ldr	r1, [r4, #16]
 8003550:	f000 fab6 	bl	8003ac0 <memcpy>
 8003554:	89a3      	ldrh	r3, [r4, #12]
 8003556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800355a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355e:	81a3      	strh	r3, [r4, #12]
 8003560:	6126      	str	r6, [r4, #16]
 8003562:	443e      	add	r6, r7
 8003564:	6026      	str	r6, [r4, #0]
 8003566:	464e      	mov	r6, r9
 8003568:	6165      	str	r5, [r4, #20]
 800356a:	1bed      	subs	r5, r5, r7
 800356c:	60a5      	str	r5, [r4, #8]
 800356e:	454e      	cmp	r6, r9
 8003570:	d900      	bls.n	8003574 <__ssputs_r+0x84>
 8003572:	464e      	mov	r6, r9
 8003574:	4632      	mov	r2, r6
 8003576:	4641      	mov	r1, r8
 8003578:	6820      	ldr	r0, [r4, #0]
 800357a:	f000 faac 	bl	8003ad6 <memmove>
 800357e:	68a3      	ldr	r3, [r4, #8]
 8003580:	2000      	movs	r0, #0
 8003582:	1b9b      	subs	r3, r3, r6
 8003584:	60a3      	str	r3, [r4, #8]
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	441e      	add	r6, r3
 800358a:	6026      	str	r6, [r4, #0]
 800358c:	e7dc      	b.n	8003548 <__ssputs_r+0x58>
 800358e:	462a      	mov	r2, r5
 8003590:	f000 fb60 	bl	8003c54 <_realloc_r>
 8003594:	4606      	mov	r6, r0
 8003596:	2800      	cmp	r0, #0
 8003598:	d1e2      	bne.n	8003560 <__ssputs_r+0x70>
 800359a:	6921      	ldr	r1, [r4, #16]
 800359c:	4650      	mov	r0, sl
 800359e:	f000 fab3 	bl	8003b08 <_free_r>
 80035a2:	e7c8      	b.n	8003536 <__ssputs_r+0x46>

080035a4 <_svfiprintf_r>:
 80035a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a8:	461d      	mov	r5, r3
 80035aa:	898b      	ldrh	r3, [r1, #12]
 80035ac:	b09d      	sub	sp, #116	; 0x74
 80035ae:	061f      	lsls	r7, r3, #24
 80035b0:	4680      	mov	r8, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	4616      	mov	r6, r2
 80035b6:	d50f      	bpl.n	80035d8 <_svfiprintf_r+0x34>
 80035b8:	690b      	ldr	r3, [r1, #16]
 80035ba:	b96b      	cbnz	r3, 80035d8 <_svfiprintf_r+0x34>
 80035bc:	2140      	movs	r1, #64	; 0x40
 80035be:	f000 faef 	bl	8003ba0 <_malloc_r>
 80035c2:	6020      	str	r0, [r4, #0]
 80035c4:	6120      	str	r0, [r4, #16]
 80035c6:	b928      	cbnz	r0, 80035d4 <_svfiprintf_r+0x30>
 80035c8:	230c      	movs	r3, #12
 80035ca:	f8c8 3000 	str.w	r3, [r8]
 80035ce:	f04f 30ff 	mov.w	r0, #4294967295
 80035d2:	e0c8      	b.n	8003766 <_svfiprintf_r+0x1c2>
 80035d4:	2340      	movs	r3, #64	; 0x40
 80035d6:	6163      	str	r3, [r4, #20]
 80035d8:	2300      	movs	r3, #0
 80035da:	9309      	str	r3, [sp, #36]	; 0x24
 80035dc:	2320      	movs	r3, #32
 80035de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035e2:	2330      	movs	r3, #48	; 0x30
 80035e4:	f04f 0b01 	mov.w	fp, #1
 80035e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035ec:	9503      	str	r5, [sp, #12]
 80035ee:	4637      	mov	r7, r6
 80035f0:	463d      	mov	r5, r7
 80035f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035f6:	b10b      	cbz	r3, 80035fc <_svfiprintf_r+0x58>
 80035f8:	2b25      	cmp	r3, #37	; 0x25
 80035fa:	d13e      	bne.n	800367a <_svfiprintf_r+0xd6>
 80035fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8003600:	d00b      	beq.n	800361a <_svfiprintf_r+0x76>
 8003602:	4653      	mov	r3, sl
 8003604:	4632      	mov	r2, r6
 8003606:	4621      	mov	r1, r4
 8003608:	4640      	mov	r0, r8
 800360a:	f7ff ff71 	bl	80034f0 <__ssputs_r>
 800360e:	3001      	adds	r0, #1
 8003610:	f000 80a4 	beq.w	800375c <_svfiprintf_r+0x1b8>
 8003614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003616:	4453      	add	r3, sl
 8003618:	9309      	str	r3, [sp, #36]	; 0x24
 800361a:	783b      	ldrb	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 809d 	beq.w	800375c <_svfiprintf_r+0x1b8>
 8003622:	2300      	movs	r3, #0
 8003624:	f04f 32ff 	mov.w	r2, #4294967295
 8003628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800362c:	9304      	str	r3, [sp, #16]
 800362e:	9307      	str	r3, [sp, #28]
 8003630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003634:	931a      	str	r3, [sp, #104]	; 0x68
 8003636:	462f      	mov	r7, r5
 8003638:	2205      	movs	r2, #5
 800363a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800363e:	4850      	ldr	r0, [pc, #320]	; (8003780 <_svfiprintf_r+0x1dc>)
 8003640:	f000 fa30 	bl	8003aa4 <memchr>
 8003644:	9b04      	ldr	r3, [sp, #16]
 8003646:	b9d0      	cbnz	r0, 800367e <_svfiprintf_r+0xda>
 8003648:	06d9      	lsls	r1, r3, #27
 800364a:	bf44      	itt	mi
 800364c:	2220      	movmi	r2, #32
 800364e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003652:	071a      	lsls	r2, r3, #28
 8003654:	bf44      	itt	mi
 8003656:	222b      	movmi	r2, #43	; 0x2b
 8003658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800365c:	782a      	ldrb	r2, [r5, #0]
 800365e:	2a2a      	cmp	r2, #42	; 0x2a
 8003660:	d015      	beq.n	800368e <_svfiprintf_r+0xea>
 8003662:	462f      	mov	r7, r5
 8003664:	2000      	movs	r0, #0
 8003666:	250a      	movs	r5, #10
 8003668:	9a07      	ldr	r2, [sp, #28]
 800366a:	4639      	mov	r1, r7
 800366c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003670:	3b30      	subs	r3, #48	; 0x30
 8003672:	2b09      	cmp	r3, #9
 8003674:	d94d      	bls.n	8003712 <_svfiprintf_r+0x16e>
 8003676:	b1b8      	cbz	r0, 80036a8 <_svfiprintf_r+0x104>
 8003678:	e00f      	b.n	800369a <_svfiprintf_r+0xf6>
 800367a:	462f      	mov	r7, r5
 800367c:	e7b8      	b.n	80035f0 <_svfiprintf_r+0x4c>
 800367e:	4a40      	ldr	r2, [pc, #256]	; (8003780 <_svfiprintf_r+0x1dc>)
 8003680:	463d      	mov	r5, r7
 8003682:	1a80      	subs	r0, r0, r2
 8003684:	fa0b f000 	lsl.w	r0, fp, r0
 8003688:	4318      	orrs	r0, r3
 800368a:	9004      	str	r0, [sp, #16]
 800368c:	e7d3      	b.n	8003636 <_svfiprintf_r+0x92>
 800368e:	9a03      	ldr	r2, [sp, #12]
 8003690:	1d11      	adds	r1, r2, #4
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	9103      	str	r1, [sp, #12]
 8003696:	2a00      	cmp	r2, #0
 8003698:	db01      	blt.n	800369e <_svfiprintf_r+0xfa>
 800369a:	9207      	str	r2, [sp, #28]
 800369c:	e004      	b.n	80036a8 <_svfiprintf_r+0x104>
 800369e:	4252      	negs	r2, r2
 80036a0:	f043 0302 	orr.w	r3, r3, #2
 80036a4:	9207      	str	r2, [sp, #28]
 80036a6:	9304      	str	r3, [sp, #16]
 80036a8:	783b      	ldrb	r3, [r7, #0]
 80036aa:	2b2e      	cmp	r3, #46	; 0x2e
 80036ac:	d10c      	bne.n	80036c8 <_svfiprintf_r+0x124>
 80036ae:	787b      	ldrb	r3, [r7, #1]
 80036b0:	2b2a      	cmp	r3, #42	; 0x2a
 80036b2:	d133      	bne.n	800371c <_svfiprintf_r+0x178>
 80036b4:	9b03      	ldr	r3, [sp, #12]
 80036b6:	3702      	adds	r7, #2
 80036b8:	1d1a      	adds	r2, r3, #4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	9203      	str	r2, [sp, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bfb8      	it	lt
 80036c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80036c6:	9305      	str	r3, [sp, #20]
 80036c8:	4d2e      	ldr	r5, [pc, #184]	; (8003784 <_svfiprintf_r+0x1e0>)
 80036ca:	2203      	movs	r2, #3
 80036cc:	7839      	ldrb	r1, [r7, #0]
 80036ce:	4628      	mov	r0, r5
 80036d0:	f000 f9e8 	bl	8003aa4 <memchr>
 80036d4:	b138      	cbz	r0, 80036e6 <_svfiprintf_r+0x142>
 80036d6:	2340      	movs	r3, #64	; 0x40
 80036d8:	1b40      	subs	r0, r0, r5
 80036da:	fa03 f000 	lsl.w	r0, r3, r0
 80036de:	9b04      	ldr	r3, [sp, #16]
 80036e0:	3701      	adds	r7, #1
 80036e2:	4303      	orrs	r3, r0
 80036e4:	9304      	str	r3, [sp, #16]
 80036e6:	7839      	ldrb	r1, [r7, #0]
 80036e8:	2206      	movs	r2, #6
 80036ea:	4827      	ldr	r0, [pc, #156]	; (8003788 <_svfiprintf_r+0x1e4>)
 80036ec:	1c7e      	adds	r6, r7, #1
 80036ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036f2:	f000 f9d7 	bl	8003aa4 <memchr>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d038      	beq.n	800376c <_svfiprintf_r+0x1c8>
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <_svfiprintf_r+0x1e8>)
 80036fc:	bb13      	cbnz	r3, 8003744 <_svfiprintf_r+0x1a0>
 80036fe:	9b03      	ldr	r3, [sp, #12]
 8003700:	3307      	adds	r3, #7
 8003702:	f023 0307 	bic.w	r3, r3, #7
 8003706:	3308      	adds	r3, #8
 8003708:	9303      	str	r3, [sp, #12]
 800370a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800370c:	444b      	add	r3, r9
 800370e:	9309      	str	r3, [sp, #36]	; 0x24
 8003710:	e76d      	b.n	80035ee <_svfiprintf_r+0x4a>
 8003712:	fb05 3202 	mla	r2, r5, r2, r3
 8003716:	2001      	movs	r0, #1
 8003718:	460f      	mov	r7, r1
 800371a:	e7a6      	b.n	800366a <_svfiprintf_r+0xc6>
 800371c:	2300      	movs	r3, #0
 800371e:	250a      	movs	r5, #10
 8003720:	4619      	mov	r1, r3
 8003722:	3701      	adds	r7, #1
 8003724:	9305      	str	r3, [sp, #20]
 8003726:	4638      	mov	r0, r7
 8003728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800372c:	3a30      	subs	r2, #48	; 0x30
 800372e:	2a09      	cmp	r2, #9
 8003730:	d903      	bls.n	800373a <_svfiprintf_r+0x196>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0c8      	beq.n	80036c8 <_svfiprintf_r+0x124>
 8003736:	9105      	str	r1, [sp, #20]
 8003738:	e7c6      	b.n	80036c8 <_svfiprintf_r+0x124>
 800373a:	fb05 2101 	mla	r1, r5, r1, r2
 800373e:	2301      	movs	r3, #1
 8003740:	4607      	mov	r7, r0
 8003742:	e7f0      	b.n	8003726 <_svfiprintf_r+0x182>
 8003744:	ab03      	add	r3, sp, #12
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	4622      	mov	r2, r4
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <_svfiprintf_r+0x1ec>)
 800374c:	a904      	add	r1, sp, #16
 800374e:	4640      	mov	r0, r8
 8003750:	f3af 8000 	nop.w
 8003754:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003758:	4681      	mov	r9, r0
 800375a:	d1d6      	bne.n	800370a <_svfiprintf_r+0x166>
 800375c:	89a3      	ldrh	r3, [r4, #12]
 800375e:	065b      	lsls	r3, r3, #25
 8003760:	f53f af35 	bmi.w	80035ce <_svfiprintf_r+0x2a>
 8003764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003766:	b01d      	add	sp, #116	; 0x74
 8003768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376c:	ab03      	add	r3, sp, #12
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	4622      	mov	r2, r4
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <_svfiprintf_r+0x1ec>)
 8003774:	a904      	add	r1, sp, #16
 8003776:	4640      	mov	r0, r8
 8003778:	f000 f882 	bl	8003880 <_printf_i>
 800377c:	e7ea      	b.n	8003754 <_svfiprintf_r+0x1b0>
 800377e:	bf00      	nop
 8003780:	08003d3c 	.word	0x08003d3c
 8003784:	08003d42 	.word	0x08003d42
 8003788:	08003d46 	.word	0x08003d46
 800378c:	00000000 	.word	0x00000000
 8003790:	080034f1 	.word	0x080034f1

08003794 <_printf_common>:
 8003794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003798:	4691      	mov	r9, r2
 800379a:	461f      	mov	r7, r3
 800379c:	688a      	ldr	r2, [r1, #8]
 800379e:	690b      	ldr	r3, [r1, #16]
 80037a0:	4606      	mov	r6, r0
 80037a2:	4293      	cmp	r3, r2
 80037a4:	bfb8      	it	lt
 80037a6:	4613      	movlt	r3, r2
 80037a8:	f8c9 3000 	str.w	r3, [r9]
 80037ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037b0:	460c      	mov	r4, r1
 80037b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037b6:	b112      	cbz	r2, 80037be <_printf_common+0x2a>
 80037b8:	3301      	adds	r3, #1
 80037ba:	f8c9 3000 	str.w	r3, [r9]
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	0699      	lsls	r1, r3, #26
 80037c2:	bf42      	ittt	mi
 80037c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037c8:	3302      	addmi	r3, #2
 80037ca:	f8c9 3000 	strmi.w	r3, [r9]
 80037ce:	6825      	ldr	r5, [r4, #0]
 80037d0:	f015 0506 	ands.w	r5, r5, #6
 80037d4:	d107      	bne.n	80037e6 <_printf_common+0x52>
 80037d6:	f104 0a19 	add.w	sl, r4, #25
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	f8d9 2000 	ldr.w	r2, [r9]
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	42ab      	cmp	r3, r5
 80037e4:	dc29      	bgt.n	800383a <_printf_common+0xa6>
 80037e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	3300      	adds	r3, #0
 80037ee:	bf18      	it	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	0692      	lsls	r2, r2, #26
 80037f4:	d42e      	bmi.n	8003854 <_printf_common+0xc0>
 80037f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037fa:	4639      	mov	r1, r7
 80037fc:	4630      	mov	r0, r6
 80037fe:	47c0      	blx	r8
 8003800:	3001      	adds	r0, #1
 8003802:	d021      	beq.n	8003848 <_printf_common+0xb4>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	68e5      	ldr	r5, [r4, #12]
 8003808:	f003 0306 	and.w	r3, r3, #6
 800380c:	2b04      	cmp	r3, #4
 800380e:	bf18      	it	ne
 8003810:	2500      	movne	r5, #0
 8003812:	f8d9 2000 	ldr.w	r2, [r9]
 8003816:	f04f 0900 	mov.w	r9, #0
 800381a:	bf08      	it	eq
 800381c:	1aad      	subeq	r5, r5, r2
 800381e:	68a3      	ldr	r3, [r4, #8]
 8003820:	6922      	ldr	r2, [r4, #16]
 8003822:	bf08      	it	eq
 8003824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003828:	4293      	cmp	r3, r2
 800382a:	bfc4      	itt	gt
 800382c:	1a9b      	subgt	r3, r3, r2
 800382e:	18ed      	addgt	r5, r5, r3
 8003830:	341a      	adds	r4, #26
 8003832:	454d      	cmp	r5, r9
 8003834:	d11a      	bne.n	800386c <_printf_common+0xd8>
 8003836:	2000      	movs	r0, #0
 8003838:	e008      	b.n	800384c <_printf_common+0xb8>
 800383a:	2301      	movs	r3, #1
 800383c:	4652      	mov	r2, sl
 800383e:	4639      	mov	r1, r7
 8003840:	4630      	mov	r0, r6
 8003842:	47c0      	blx	r8
 8003844:	3001      	adds	r0, #1
 8003846:	d103      	bne.n	8003850 <_printf_common+0xbc>
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003850:	3501      	adds	r5, #1
 8003852:	e7c2      	b.n	80037da <_printf_common+0x46>
 8003854:	2030      	movs	r0, #48	; 0x30
 8003856:	18e1      	adds	r1, r4, r3
 8003858:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003862:	4422      	add	r2, r4
 8003864:	3302      	adds	r3, #2
 8003866:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800386a:	e7c4      	b.n	80037f6 <_printf_common+0x62>
 800386c:	2301      	movs	r3, #1
 800386e:	4622      	mov	r2, r4
 8003870:	4639      	mov	r1, r7
 8003872:	4630      	mov	r0, r6
 8003874:	47c0      	blx	r8
 8003876:	3001      	adds	r0, #1
 8003878:	d0e6      	beq.n	8003848 <_printf_common+0xb4>
 800387a:	f109 0901 	add.w	r9, r9, #1
 800387e:	e7d8      	b.n	8003832 <_printf_common+0x9e>

08003880 <_printf_i>:
 8003880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003884:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003888:	460c      	mov	r4, r1
 800388a:	7e09      	ldrb	r1, [r1, #24]
 800388c:	b085      	sub	sp, #20
 800388e:	296e      	cmp	r1, #110	; 0x6e
 8003890:	4617      	mov	r7, r2
 8003892:	4606      	mov	r6, r0
 8003894:	4698      	mov	r8, r3
 8003896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003898:	f000 80b3 	beq.w	8003a02 <_printf_i+0x182>
 800389c:	d822      	bhi.n	80038e4 <_printf_i+0x64>
 800389e:	2963      	cmp	r1, #99	; 0x63
 80038a0:	d036      	beq.n	8003910 <_printf_i+0x90>
 80038a2:	d80a      	bhi.n	80038ba <_printf_i+0x3a>
 80038a4:	2900      	cmp	r1, #0
 80038a6:	f000 80b9 	beq.w	8003a1c <_printf_i+0x19c>
 80038aa:	2958      	cmp	r1, #88	; 0x58
 80038ac:	f000 8083 	beq.w	80039b6 <_printf_i+0x136>
 80038b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038b8:	e032      	b.n	8003920 <_printf_i+0xa0>
 80038ba:	2964      	cmp	r1, #100	; 0x64
 80038bc:	d001      	beq.n	80038c2 <_printf_i+0x42>
 80038be:	2969      	cmp	r1, #105	; 0x69
 80038c0:	d1f6      	bne.n	80038b0 <_printf_i+0x30>
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	6813      	ldr	r3, [r2, #0]
 80038c6:	0605      	lsls	r5, r0, #24
 80038c8:	f103 0104 	add.w	r1, r3, #4
 80038cc:	d52a      	bpl.n	8003924 <_printf_i+0xa4>
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6011      	str	r1, [r2, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	da03      	bge.n	80038de <_printf_i+0x5e>
 80038d6:	222d      	movs	r2, #45	; 0x2d
 80038d8:	425b      	negs	r3, r3
 80038da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038de:	486f      	ldr	r0, [pc, #444]	; (8003a9c <_printf_i+0x21c>)
 80038e0:	220a      	movs	r2, #10
 80038e2:	e039      	b.n	8003958 <_printf_i+0xd8>
 80038e4:	2973      	cmp	r1, #115	; 0x73
 80038e6:	f000 809d 	beq.w	8003a24 <_printf_i+0x1a4>
 80038ea:	d808      	bhi.n	80038fe <_printf_i+0x7e>
 80038ec:	296f      	cmp	r1, #111	; 0x6f
 80038ee:	d020      	beq.n	8003932 <_printf_i+0xb2>
 80038f0:	2970      	cmp	r1, #112	; 0x70
 80038f2:	d1dd      	bne.n	80038b0 <_printf_i+0x30>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	f043 0320 	orr.w	r3, r3, #32
 80038fa:	6023      	str	r3, [r4, #0]
 80038fc:	e003      	b.n	8003906 <_printf_i+0x86>
 80038fe:	2975      	cmp	r1, #117	; 0x75
 8003900:	d017      	beq.n	8003932 <_printf_i+0xb2>
 8003902:	2978      	cmp	r1, #120	; 0x78
 8003904:	d1d4      	bne.n	80038b0 <_printf_i+0x30>
 8003906:	2378      	movs	r3, #120	; 0x78
 8003908:	4865      	ldr	r0, [pc, #404]	; (8003aa0 <_printf_i+0x220>)
 800390a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800390e:	e055      	b.n	80039bc <_printf_i+0x13c>
 8003910:	6813      	ldr	r3, [r2, #0]
 8003912:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003916:	1d19      	adds	r1, r3, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6011      	str	r1, [r2, #0]
 800391c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003920:	2301      	movs	r3, #1
 8003922:	e08c      	b.n	8003a3e <_printf_i+0x1be>
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f010 0f40 	tst.w	r0, #64	; 0x40
 800392a:	6011      	str	r1, [r2, #0]
 800392c:	bf18      	it	ne
 800392e:	b21b      	sxthne	r3, r3
 8003930:	e7cf      	b.n	80038d2 <_printf_i+0x52>
 8003932:	6813      	ldr	r3, [r2, #0]
 8003934:	6825      	ldr	r5, [r4, #0]
 8003936:	1d18      	adds	r0, r3, #4
 8003938:	6010      	str	r0, [r2, #0]
 800393a:	0628      	lsls	r0, r5, #24
 800393c:	d501      	bpl.n	8003942 <_printf_i+0xc2>
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	e002      	b.n	8003948 <_printf_i+0xc8>
 8003942:	0668      	lsls	r0, r5, #25
 8003944:	d5fb      	bpl.n	800393e <_printf_i+0xbe>
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	296f      	cmp	r1, #111	; 0x6f
 800394a:	bf14      	ite	ne
 800394c:	220a      	movne	r2, #10
 800394e:	2208      	moveq	r2, #8
 8003950:	4852      	ldr	r0, [pc, #328]	; (8003a9c <_printf_i+0x21c>)
 8003952:	2100      	movs	r1, #0
 8003954:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003958:	6865      	ldr	r5, [r4, #4]
 800395a:	2d00      	cmp	r5, #0
 800395c:	60a5      	str	r5, [r4, #8]
 800395e:	f2c0 8095 	blt.w	8003a8c <_printf_i+0x20c>
 8003962:	6821      	ldr	r1, [r4, #0]
 8003964:	f021 0104 	bic.w	r1, r1, #4
 8003968:	6021      	str	r1, [r4, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d13d      	bne.n	80039ea <_printf_i+0x16a>
 800396e:	2d00      	cmp	r5, #0
 8003970:	f040 808e 	bne.w	8003a90 <_printf_i+0x210>
 8003974:	4665      	mov	r5, ip
 8003976:	2a08      	cmp	r2, #8
 8003978:	d10b      	bne.n	8003992 <_printf_i+0x112>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	07db      	lsls	r3, r3, #31
 800397e:	d508      	bpl.n	8003992 <_printf_i+0x112>
 8003980:	6923      	ldr	r3, [r4, #16]
 8003982:	6862      	ldr	r2, [r4, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	bfde      	ittt	le
 8003988:	2330      	movle	r3, #48	; 0x30
 800398a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800398e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003992:	ebac 0305 	sub.w	r3, ip, r5
 8003996:	6123      	str	r3, [r4, #16]
 8003998:	f8cd 8000 	str.w	r8, [sp]
 800399c:	463b      	mov	r3, r7
 800399e:	aa03      	add	r2, sp, #12
 80039a0:	4621      	mov	r1, r4
 80039a2:	4630      	mov	r0, r6
 80039a4:	f7ff fef6 	bl	8003794 <_printf_common>
 80039a8:	3001      	adds	r0, #1
 80039aa:	d14d      	bne.n	8003a48 <_printf_i+0x1c8>
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	b005      	add	sp, #20
 80039b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039b6:	4839      	ldr	r0, [pc, #228]	; (8003a9c <_printf_i+0x21c>)
 80039b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80039bc:	6813      	ldr	r3, [r2, #0]
 80039be:	6821      	ldr	r1, [r4, #0]
 80039c0:	1d1d      	adds	r5, r3, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6015      	str	r5, [r2, #0]
 80039c6:	060a      	lsls	r2, r1, #24
 80039c8:	d50b      	bpl.n	80039e2 <_printf_i+0x162>
 80039ca:	07ca      	lsls	r2, r1, #31
 80039cc:	bf44      	itt	mi
 80039ce:	f041 0120 	orrmi.w	r1, r1, #32
 80039d2:	6021      	strmi	r1, [r4, #0]
 80039d4:	b91b      	cbnz	r3, 80039de <_printf_i+0x15e>
 80039d6:	6822      	ldr	r2, [r4, #0]
 80039d8:	f022 0220 	bic.w	r2, r2, #32
 80039dc:	6022      	str	r2, [r4, #0]
 80039de:	2210      	movs	r2, #16
 80039e0:	e7b7      	b.n	8003952 <_printf_i+0xd2>
 80039e2:	064d      	lsls	r5, r1, #25
 80039e4:	bf48      	it	mi
 80039e6:	b29b      	uxthmi	r3, r3
 80039e8:	e7ef      	b.n	80039ca <_printf_i+0x14a>
 80039ea:	4665      	mov	r5, ip
 80039ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80039f0:	fb02 3311 	mls	r3, r2, r1, r3
 80039f4:	5cc3      	ldrb	r3, [r0, r3]
 80039f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039fa:	460b      	mov	r3, r1
 80039fc:	2900      	cmp	r1, #0
 80039fe:	d1f5      	bne.n	80039ec <_printf_i+0x16c>
 8003a00:	e7b9      	b.n	8003976 <_printf_i+0xf6>
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	6825      	ldr	r5, [r4, #0]
 8003a06:	1d18      	adds	r0, r3, #4
 8003a08:	6961      	ldr	r1, [r4, #20]
 8003a0a:	6010      	str	r0, [r2, #0]
 8003a0c:	0628      	lsls	r0, r5, #24
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	d501      	bpl.n	8003a16 <_printf_i+0x196>
 8003a12:	6019      	str	r1, [r3, #0]
 8003a14:	e002      	b.n	8003a1c <_printf_i+0x19c>
 8003a16:	066a      	lsls	r2, r5, #25
 8003a18:	d5fb      	bpl.n	8003a12 <_printf_i+0x192>
 8003a1a:	8019      	strh	r1, [r3, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	4665      	mov	r5, ip
 8003a20:	6123      	str	r3, [r4, #16]
 8003a22:	e7b9      	b.n	8003998 <_printf_i+0x118>
 8003a24:	6813      	ldr	r3, [r2, #0]
 8003a26:	1d19      	adds	r1, r3, #4
 8003a28:	6011      	str	r1, [r2, #0]
 8003a2a:	681d      	ldr	r5, [r3, #0]
 8003a2c:	6862      	ldr	r2, [r4, #4]
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4628      	mov	r0, r5
 8003a32:	f000 f837 	bl	8003aa4 <memchr>
 8003a36:	b108      	cbz	r0, 8003a3c <_printf_i+0x1bc>
 8003a38:	1b40      	subs	r0, r0, r5
 8003a3a:	6060      	str	r0, [r4, #4]
 8003a3c:	6863      	ldr	r3, [r4, #4]
 8003a3e:	6123      	str	r3, [r4, #16]
 8003a40:	2300      	movs	r3, #0
 8003a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a46:	e7a7      	b.n	8003998 <_printf_i+0x118>
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	462a      	mov	r2, r5
 8003a4c:	4639      	mov	r1, r7
 8003a4e:	4630      	mov	r0, r6
 8003a50:	47c0      	blx	r8
 8003a52:	3001      	adds	r0, #1
 8003a54:	d0aa      	beq.n	80039ac <_printf_i+0x12c>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	079b      	lsls	r3, r3, #30
 8003a5a:	d413      	bmi.n	8003a84 <_printf_i+0x204>
 8003a5c:	68e0      	ldr	r0, [r4, #12]
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	4298      	cmp	r0, r3
 8003a62:	bfb8      	it	lt
 8003a64:	4618      	movlt	r0, r3
 8003a66:	e7a3      	b.n	80039b0 <_printf_i+0x130>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	464a      	mov	r2, r9
 8003a6c:	4639      	mov	r1, r7
 8003a6e:	4630      	mov	r0, r6
 8003a70:	47c0      	blx	r8
 8003a72:	3001      	adds	r0, #1
 8003a74:	d09a      	beq.n	80039ac <_printf_i+0x12c>
 8003a76:	3501      	adds	r5, #1
 8003a78:	68e3      	ldr	r3, [r4, #12]
 8003a7a:	9a03      	ldr	r2, [sp, #12]
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	42ab      	cmp	r3, r5
 8003a80:	dcf2      	bgt.n	8003a68 <_printf_i+0x1e8>
 8003a82:	e7eb      	b.n	8003a5c <_printf_i+0x1dc>
 8003a84:	2500      	movs	r5, #0
 8003a86:	f104 0919 	add.w	r9, r4, #25
 8003a8a:	e7f5      	b.n	8003a78 <_printf_i+0x1f8>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ac      	bne.n	80039ea <_printf_i+0x16a>
 8003a90:	7803      	ldrb	r3, [r0, #0]
 8003a92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a9a:	e76c      	b.n	8003976 <_printf_i+0xf6>
 8003a9c:	08003d4d 	.word	0x08003d4d
 8003aa0:	08003d5e 	.word	0x08003d5e

08003aa4 <memchr>:
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	b2c9      	uxtb	r1, r1
 8003aa8:	4402      	add	r2, r0
 8003aaa:	4290      	cmp	r0, r2
 8003aac:	4603      	mov	r3, r0
 8003aae:	d101      	bne.n	8003ab4 <memchr+0x10>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e003      	b.n	8003abc <memchr+0x18>
 8003ab4:	781c      	ldrb	r4, [r3, #0]
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	428c      	cmp	r4, r1
 8003aba:	d1f6      	bne.n	8003aaa <memchr+0x6>
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd10      	pop	{r4, pc}

08003ac0 <memcpy>:
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	1e43      	subs	r3, r0, #1
 8003ac4:	440a      	add	r2, r1
 8003ac6:	4291      	cmp	r1, r2
 8003ac8:	d100      	bne.n	8003acc <memcpy+0xc>
 8003aca:	bd10      	pop	{r4, pc}
 8003acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ad4:	e7f7      	b.n	8003ac6 <memcpy+0x6>

08003ad6 <memmove>:
 8003ad6:	4288      	cmp	r0, r1
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	eb01 0302 	add.w	r3, r1, r2
 8003ade:	d807      	bhi.n	8003af0 <memmove+0x1a>
 8003ae0:	1e42      	subs	r2, r0, #1
 8003ae2:	4299      	cmp	r1, r3
 8003ae4:	d00a      	beq.n	8003afc <memmove+0x26>
 8003ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aea:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003aee:	e7f8      	b.n	8003ae2 <memmove+0xc>
 8003af0:	4283      	cmp	r3, r0
 8003af2:	d9f5      	bls.n	8003ae0 <memmove+0xa>
 8003af4:	1881      	adds	r1, r0, r2
 8003af6:	1ad2      	subs	r2, r2, r3
 8003af8:	42d3      	cmn	r3, r2
 8003afa:	d100      	bne.n	8003afe <memmove+0x28>
 8003afc:	bd10      	pop	{r4, pc}
 8003afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b06:	e7f7      	b.n	8003af8 <memmove+0x22>

08003b08 <_free_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	d043      	beq.n	8003b98 <_free_r+0x90>
 8003b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b14:	1f0c      	subs	r4, r1, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bfb8      	it	lt
 8003b1a:	18e4      	addlt	r4, r4, r3
 8003b1c:	f000 f8d0 	bl	8003cc0 <__malloc_lock>
 8003b20:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <_free_r+0x94>)
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	4610      	mov	r0, r2
 8003b26:	b933      	cbnz	r3, 8003b36 <_free_r+0x2e>
 8003b28:	6063      	str	r3, [r4, #4]
 8003b2a:	6014      	str	r4, [r2, #0]
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b32:	f000 b8c6 	b.w	8003cc2 <__malloc_unlock>
 8003b36:	42a3      	cmp	r3, r4
 8003b38:	d90b      	bls.n	8003b52 <_free_r+0x4a>
 8003b3a:	6821      	ldr	r1, [r4, #0]
 8003b3c:	1862      	adds	r2, r4, r1
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	bf01      	itttt	eq
 8003b42:	681a      	ldreq	r2, [r3, #0]
 8003b44:	685b      	ldreq	r3, [r3, #4]
 8003b46:	1852      	addeq	r2, r2, r1
 8003b48:	6022      	streq	r2, [r4, #0]
 8003b4a:	6063      	str	r3, [r4, #4]
 8003b4c:	6004      	str	r4, [r0, #0]
 8003b4e:	e7ed      	b.n	8003b2c <_free_r+0x24>
 8003b50:	4613      	mov	r3, r2
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	b10a      	cbz	r2, 8003b5a <_free_r+0x52>
 8003b56:	42a2      	cmp	r2, r4
 8003b58:	d9fa      	bls.n	8003b50 <_free_r+0x48>
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	1858      	adds	r0, r3, r1
 8003b5e:	42a0      	cmp	r0, r4
 8003b60:	d10b      	bne.n	8003b7a <_free_r+0x72>
 8003b62:	6820      	ldr	r0, [r4, #0]
 8003b64:	4401      	add	r1, r0
 8003b66:	1858      	adds	r0, r3, r1
 8003b68:	4282      	cmp	r2, r0
 8003b6a:	6019      	str	r1, [r3, #0]
 8003b6c:	d1de      	bne.n	8003b2c <_free_r+0x24>
 8003b6e:	6810      	ldr	r0, [r2, #0]
 8003b70:	6852      	ldr	r2, [r2, #4]
 8003b72:	4401      	add	r1, r0
 8003b74:	6019      	str	r1, [r3, #0]
 8003b76:	605a      	str	r2, [r3, #4]
 8003b78:	e7d8      	b.n	8003b2c <_free_r+0x24>
 8003b7a:	d902      	bls.n	8003b82 <_free_r+0x7a>
 8003b7c:	230c      	movs	r3, #12
 8003b7e:	602b      	str	r3, [r5, #0]
 8003b80:	e7d4      	b.n	8003b2c <_free_r+0x24>
 8003b82:	6820      	ldr	r0, [r4, #0]
 8003b84:	1821      	adds	r1, r4, r0
 8003b86:	428a      	cmp	r2, r1
 8003b88:	bf01      	itttt	eq
 8003b8a:	6811      	ldreq	r1, [r2, #0]
 8003b8c:	6852      	ldreq	r2, [r2, #4]
 8003b8e:	1809      	addeq	r1, r1, r0
 8003b90:	6021      	streq	r1, [r4, #0]
 8003b92:	6062      	str	r2, [r4, #4]
 8003b94:	605c      	str	r4, [r3, #4]
 8003b96:	e7c9      	b.n	8003b2c <_free_r+0x24>
 8003b98:	bd38      	pop	{r3, r4, r5, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000090 	.word	0x20000090

08003ba0 <_malloc_r>:
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	1ccd      	adds	r5, r1, #3
 8003ba4:	f025 0503 	bic.w	r5, r5, #3
 8003ba8:	3508      	adds	r5, #8
 8003baa:	2d0c      	cmp	r5, #12
 8003bac:	bf38      	it	cc
 8003bae:	250c      	movcc	r5, #12
 8003bb0:	2d00      	cmp	r5, #0
 8003bb2:	4606      	mov	r6, r0
 8003bb4:	db01      	blt.n	8003bba <_malloc_r+0x1a>
 8003bb6:	42a9      	cmp	r1, r5
 8003bb8:	d903      	bls.n	8003bc2 <_malloc_r+0x22>
 8003bba:	230c      	movs	r3, #12
 8003bbc:	6033      	str	r3, [r6, #0]
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
 8003bc2:	f000 f87d 	bl	8003cc0 <__malloc_lock>
 8003bc6:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <_malloc_r+0xac>)
 8003bc8:	6814      	ldr	r4, [r2, #0]
 8003bca:	4621      	mov	r1, r4
 8003bcc:	b991      	cbnz	r1, 8003bf4 <_malloc_r+0x54>
 8003bce:	4c20      	ldr	r4, [pc, #128]	; (8003c50 <_malloc_r+0xb0>)
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	b91b      	cbnz	r3, 8003bdc <_malloc_r+0x3c>
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f000 f863 	bl	8003ca0 <_sbrk_r>
 8003bda:	6020      	str	r0, [r4, #0]
 8003bdc:	4629      	mov	r1, r5
 8003bde:	4630      	mov	r0, r6
 8003be0:	f000 f85e 	bl	8003ca0 <_sbrk_r>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d124      	bne.n	8003c32 <_malloc_r+0x92>
 8003be8:	230c      	movs	r3, #12
 8003bea:	4630      	mov	r0, r6
 8003bec:	6033      	str	r3, [r6, #0]
 8003bee:	f000 f868 	bl	8003cc2 <__malloc_unlock>
 8003bf2:	e7e4      	b.n	8003bbe <_malloc_r+0x1e>
 8003bf4:	680b      	ldr	r3, [r1, #0]
 8003bf6:	1b5b      	subs	r3, r3, r5
 8003bf8:	d418      	bmi.n	8003c2c <_malloc_r+0x8c>
 8003bfa:	2b0b      	cmp	r3, #11
 8003bfc:	d90f      	bls.n	8003c1e <_malloc_r+0x7e>
 8003bfe:	600b      	str	r3, [r1, #0]
 8003c00:	18cc      	adds	r4, r1, r3
 8003c02:	50cd      	str	r5, [r1, r3]
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 f85c 	bl	8003cc2 <__malloc_unlock>
 8003c0a:	f104 000b 	add.w	r0, r4, #11
 8003c0e:	1d23      	adds	r3, r4, #4
 8003c10:	f020 0007 	bic.w	r0, r0, #7
 8003c14:	1ac3      	subs	r3, r0, r3
 8003c16:	d0d3      	beq.n	8003bc0 <_malloc_r+0x20>
 8003c18:	425a      	negs	r2, r3
 8003c1a:	50e2      	str	r2, [r4, r3]
 8003c1c:	e7d0      	b.n	8003bc0 <_malloc_r+0x20>
 8003c1e:	684b      	ldr	r3, [r1, #4]
 8003c20:	428c      	cmp	r4, r1
 8003c22:	bf16      	itet	ne
 8003c24:	6063      	strne	r3, [r4, #4]
 8003c26:	6013      	streq	r3, [r2, #0]
 8003c28:	460c      	movne	r4, r1
 8003c2a:	e7eb      	b.n	8003c04 <_malloc_r+0x64>
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	6849      	ldr	r1, [r1, #4]
 8003c30:	e7cc      	b.n	8003bcc <_malloc_r+0x2c>
 8003c32:	1cc4      	adds	r4, r0, #3
 8003c34:	f024 0403 	bic.w	r4, r4, #3
 8003c38:	42a0      	cmp	r0, r4
 8003c3a:	d005      	beq.n	8003c48 <_malloc_r+0xa8>
 8003c3c:	1a21      	subs	r1, r4, r0
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f000 f82e 	bl	8003ca0 <_sbrk_r>
 8003c44:	3001      	adds	r0, #1
 8003c46:	d0cf      	beq.n	8003be8 <_malloc_r+0x48>
 8003c48:	6025      	str	r5, [r4, #0]
 8003c4a:	e7db      	b.n	8003c04 <_malloc_r+0x64>
 8003c4c:	20000090 	.word	0x20000090
 8003c50:	20000094 	.word	0x20000094

08003c54 <_realloc_r>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	4607      	mov	r7, r0
 8003c58:	4614      	mov	r4, r2
 8003c5a:	460e      	mov	r6, r1
 8003c5c:	b921      	cbnz	r1, 8003c68 <_realloc_r+0x14>
 8003c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c62:	4611      	mov	r1, r2
 8003c64:	f7ff bf9c 	b.w	8003ba0 <_malloc_r>
 8003c68:	b922      	cbnz	r2, 8003c74 <_realloc_r+0x20>
 8003c6a:	f7ff ff4d 	bl	8003b08 <_free_r>
 8003c6e:	4625      	mov	r5, r4
 8003c70:	4628      	mov	r0, r5
 8003c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c74:	f000 f826 	bl	8003cc4 <_malloc_usable_size_r>
 8003c78:	42a0      	cmp	r0, r4
 8003c7a:	d20f      	bcs.n	8003c9c <_realloc_r+0x48>
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	4638      	mov	r0, r7
 8003c80:	f7ff ff8e 	bl	8003ba0 <_malloc_r>
 8003c84:	4605      	mov	r5, r0
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d0f2      	beq.n	8003c70 <_realloc_r+0x1c>
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	f7ff ff17 	bl	8003ac0 <memcpy>
 8003c92:	4631      	mov	r1, r6
 8003c94:	4638      	mov	r0, r7
 8003c96:	f7ff ff37 	bl	8003b08 <_free_r>
 8003c9a:	e7e9      	b.n	8003c70 <_realloc_r+0x1c>
 8003c9c:	4635      	mov	r5, r6
 8003c9e:	e7e7      	b.n	8003c70 <_realloc_r+0x1c>

08003ca0 <_sbrk_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	4c05      	ldr	r4, [pc, #20]	; (8003cbc <_sbrk_r+0x1c>)
 8003ca6:	4605      	mov	r5, r0
 8003ca8:	4608      	mov	r0, r1
 8003caa:	6023      	str	r3, [r4, #0]
 8003cac:	f7fd fa88 	bl	80011c0 <_sbrk>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_sbrk_r+0x1a>
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_sbrk_r+0x1a>
 8003cb8:	602b      	str	r3, [r5, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	20000130 	.word	0x20000130

08003cc0 <__malloc_lock>:
 8003cc0:	4770      	bx	lr

08003cc2 <__malloc_unlock>:
 8003cc2:	4770      	bx	lr

08003cc4 <_malloc_usable_size_r>:
 8003cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc8:	1f18      	subs	r0, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bfbc      	itt	lt
 8003cce:	580b      	ldrlt	r3, [r1, r0]
 8003cd0:	18c0      	addlt	r0, r0, r3
 8003cd2:	4770      	bx	lr

08003cd4 <_init>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr

08003ce0 <_fini>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr
